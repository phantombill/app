‚òÖ‚ñ∂‚ñ∫‚ñ¨‚Ä¢¬ª‚Ä∫‚ñ≤‚ô•‚ö†Ô∏èüí°¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚íπ„äø‚Ä†‚Ç±‚Ä¶
‚òÖbasics:
  ‚ñ∂strategy: ‚ñ∫goals: ‚ñ¨‚Üìsize:‚úìformat,optimize ‚ñ¨‚Üìhttp:sprits
      ‚ñ¨‚Üìbandwidth & quality:srcset='',sizes=''
    ‚ñ∫if simple illustration use css: -size, rwd, quality
      ‚ñ¨1_<style>: -http/uncached ‚ñ¨2_external.css: cached/+http
      ‚ñ¨links: css-tricks.com/the-shapes-of-css
        codepen.io/collection/yeDQoX
    ‚ñ∫else if complex illustration use svg: -size, rwd, quality
      ‚ñ¨styled & dynamic: ‚Ä¢<object>: cached/+http,‚â†external.css
        ‚Ä¢inline<svg> organize label optimize:-http/‚â†cached
      ‚ñ¨else optimize: ‚Ä¢<svg>:-http/uncached ‚Ä¢<img>:cached/+http
    ‚ñ∫else if must be responsive:
      ‚ñ¨few images: choice best format, export multi-sizes by PHs
      ‚ñ¨too much imgs: build automatic app on server run on fly
        to export multi-sizes optimize: ‚Ä¢glide.thephpleague.com
        ‚Ä¢cloudfour.com/thinks/image-resizing-services/
    ‚ñ∫else jest optimize: manually or by server-app.
  ‚ñ∂formats: raster=bit-mapped(jpg|png|gif|webp) vector(svg)
      terminal: $ file img.formatSuffix
    ‚ñ∫jpeg.org: (Joint Photographics Expert Group)
      ‚ñ¨properly for blended color transitions
      ‚ñ¨Truecolor based 24bit=rgb*8bit, lossy on each compression
      ‚ñ¨progressive #passes low‚Üíoriginal=load100% UX‚Üëperfermence
        ‚Ä¢by default load linear from top to bottom
    ‚ñ∫png: (Portable Network Graphics)
      ‚ñ¨features: ‚Ä¢Lossless compression
        ‚Ä¢transparency: alpha=Multiple-level, binary=on|off
        ‚Ä¢Interluce(progressive) display in multiple passes sizs‚Üë
        ‚Ä¢+Embed text: like copyright meta-information
        ‚Ä¢+Embed ICC: save colorProfileInfo system who create it
        ‚Ä¢+Gamma correction channel: adjust brightnessLvl
      ‚ñ¨based on: (8|24|48-bit rgb-colors) & (16-bit grayscale)
        ‚Ä¢png-8: properly for huge flat color areas as icon|logo
          ‚Ä∫transparency: binary(on|off) or variable(multi-levels)
          ‚Ä∫indexed numbers on each pixel of pallete,
            refer‚Üí 2^(1~8)=2~256color positioned in c-table?map
          ¬ªpalletes methods: ‚Ä∫Custom ‚Ä∫System
            ‚Ä∫Exact: if original colors ‚â§ 2^8=256.
              Optimized Octree (Paint Shop Pro Photo only)
            ‚Ä∫Adaptive: to most used colors.
              Optimized Median Cut (Paint Shop Pro Photo only)
            ‚Ä∫Perceptual'phs: Adabtive to human eye sansitivity
            ‚Ä∫Selective'phs: Perceptual to areas of broad color
            ‚Ä∫useless: Web Adaptive, Restrictive, or Web216
        ‚Ä¢png-24(Truecolor): properly for multiLvl transparency.
          ‚Ä∫alpha transparecy channel can have 2^8bit=256lvl.
        ‚Ä¢apng: (94%G) animated image better than gif
          ‚Ä∫support 24bit(Truecolor) & alpha channel transparency
    ‚ñ∫gif: (Graphic Interchange format) (useless)
      ‚ñ¨properly for large flat areas & binary transparency
      ‚ñ¨lossless comprition ‚ñ¨indexed based on 8bit like png8
      ‚ñ¨interlacing like jpeg progressive ‚ñ¨animated frames
    ‚ñ∫webp: (web picture) (91% + 3.4% g)
      ‚ñ¨can be lossy|lossless comprition, & 40-70% small ‚Üìsize.
      ‚ñ¨alpha transparency channel like png-24's
      ‚ñ¨animation like git & apng.
      ‚ñ¨can store meta & color profile ICC like png's
      ‚ñ¨link: developers.google.com/speed/webp
  ‚ñ∂sources: create img, use existed img, hire designer
    ‚ñ∫create one: ‚ñ¨drawn logo by illustrator
      ‚ñ¨capture by camera & edit it by photoshop
      ‚ñ¨scan by print & blure dot-pattern & resize to small
    ‚ñ∫use existed one: all images copyRighted
      ‚ñ¨creativecommons.org: free usage|reproducing but shared
        ‚Ä¢unsplash.com: all rights free high resolution & filter
        ‚Ä¢commons.wikimedia.org: all rights free high resolution
        ‚Ä¢flickr.com/creativecommons: some free some non-comarce
      ‚ñ¨royall-free: buy license 1once‚Üí ‚àûduration use|reproduce globaly in milti-projects 10$‚Üëistockphoto 50$‚Üëgettyimages
      ‚ñ¨rights-managed: buy license at period in single-project with particular usage in one location: gettyimages.com
    ‚ñ∫buy css: animations buttons gradients-templates‚Ä¶
      ‚ñ¨clipart.com: membership fee, high quality
      ‚ñ¨1clipart.com: icons|applications free|low-price
      ‚ñ¨thenounproject.com: one color icons free|fee/y
      ‚ñ¨iconfinder.com: full colored styles free|fee/m
  ‚ñ∂resolution: img-r‚â†important/#px is, print-r=dpi'dotsPerInch
    ‚ñ∫some high-density screens as retina can display 4px‚Üë in 1px
      ‚ñ¨issues: css-img display narrow on retina, large on normal
    ‚ñ∫reference-pixel #x(x=scale): 1cssPX=#screenPX
      ‚ñ¨screenPX: apple=#point,google=#DP?DIP'deviceIndependentPx
      ‚ñ¨ex: .cssimg{width:10px;height:10px} /*96ppi 1x*/
        ‚Ä¢iphone4 326ppi 2x: 20pxScreen, 20PT, 20DP
        ‚Ä¢tablet 130ppi 0.5x: 50pxScreen, 5PT. 5DP
    ‚ñ∫to avoid blur: set:svg 1x, or at least:raster x1,raster x2
      ‚ñ¨<img src=img@1.webp srcset='i@.5.webp .5x, i@2.webp 2x'>
        //img@1:10x10px i@.5:5x5px i@2:20x20px
  ‚ñ∂favicon: <link rel=icon type=image/x-icon href=/favicon.ico>
    ‚ñ∫convert: png?text?emoji‚Üíico: favicon.io/
    ‚ñ∫collection: <link rel=apple-touch-icon sizes=180x180 href=f.png>
      <link rel=icon type=image/png sizes=32x32 href=f32.png>
      <link rel=icon type=image/png sizes=16x16 href=f16.png>‚Ä¶
      <link rel=manifest href=/site.webmanifest>
‚òÖproduction: (photoshop|gimp)
  ‚ñ∂export differ formats: (export/save-for-web ctrl+shift+alt+s)
    ‚ñ¨transparency: 
      ‚Ä¢png24: save Truecolor-data in 4 channels r, g, b, a
      ‚Ä¢png8‚úó: save 256color-data in 1 channel rgba(,,, 0~1)
      ‚Ä¢gif|png8: save 256color-data in 1 channel rgba(,,, 0|1)
        ‚Ä∫issue: on multiLvl generate halo(edgeColor‚Üí#fff?#000) not suited to bg-color.
        ‚Ä∫fix: set matte‚Üínone, dither‚Üí100%, dither-method‚Üípattern
    ‚ñ∫jpeg: softEdges|blendColors
      ‚ñ¨quality:0~100% lossy ‚ñ¨progrissive:‚Üìsize ‚ñ¨blur:0~2 ‚Üìsize
      ‚ñ¨metadata(copyright, source, comment) ‚ñ¨embed color profile
    ‚ñ∫png:hardEdge|flateColor ‚Ä¢quality:lossless ‚Ä¢interlaced:‚Üësize
        ‚Ä¢metadata(copyright,source,comment) ‚Ä¢embed color profile
        ‚Ä¢matte(req transparency=√ò, dither=√ò): none(transparent), Eyedropper, Foreground, background, custom color.
      ‚ñ¨png24: transparency=variable 256lvl, better opti-method
      ‚ñ¨png8: ‚Ä¢colorTable:2~256
        ‚Ä¢transparency=variable‚úó|binary‚íπ|√ò‚Üímatte ‚Ä∫dither:0~100%
          ‚Ä∫ditherMethod(anti-aliasing:smooth edges/bg contrast by matte): none, diffusion(0~100%), pattern, noise.  
    ‚ñ∫gif(hardEdge|flateColor animation): useless
      ‚Ä¢quality:lossless ‚Ä¢colorTable:2~256 ‚Ä¢interlaced:‚Üësize
      ‚Ä¢transparency=binary: ‚Ä∫dither:0~100% ‚Ä∫ditherMethod:asPNG8
      ‚Ä¢metadata(copyright,source,comment)
    ‚ñ∫webp: lossy|lossless better than jpg|png
  ‚ñ∂responsive: <meta name=viewport content='width=device-width'>
    ‚ñ∫high Density: same-size/different-resulotion
       <img alt='img@.5:50px,img:100px,img@2:200px'
        srcset='img@.5.webp .5x, img@2.webp 2x' src=img@1.webp>
      ‚ñ¨syntax: srcset='img #x,‚Ä¶'//return 1st img@#x‚â•resolution
      ‚ñ¨work at @1x‚â†2x scale: mathMistakes√ò pcPerfermence‚Üë stable
      ‚ñ¨export-as: ctrl+shift+alt+w, click +button, select #x's
      ‚ñ¨avoid upscale blur @1x:
        1‚Ä¢create new layer with target @1x width & height
        2‚Ä¢add original img ‚â• @3x|@2x [file‚Üíplace linked]
          ‚Ä∫issue: in Phs-2018 place-linked jpeg file ignored
          ‚Ä∫fix: convert jpeg to psd before place-linked.
        3‚Ä¢delete the empty layer & work with the place-linked
      ‚ñ¨automatic:‚Ä¢paidServer:cloudinary.com akamai.com kraken.io
        ‚Ä¢free web-app: https://docs.google.com/spreadsheets/u/0/d/1e4qdGEoq7tqDCnY7iSSnl3OFoWkzhRfVAly-73A3uCc/htmlview
    ‚ñ∫responsive-layout (different-sizes): <img src=fb
        alt='small420‚Üì,medium421~600,large601~1000,huge1001‚Üë'
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='small 420w,medium 600w,large 800w,huge 1200w'>
      ‚ñ¨syntax:    load 1st img have size‚â•slot of 1st meted query
        sizes='(query1) slot1,‚Ä¶,sF'//return 1st meted query slot
        srcset='img1 size1,‚Ä¶'    //return 1st img have size‚â•slot
      ‚ñ¨resizing(manual by photoshop):
        ‚Ä¢percentage:.01~100~‚Üë%, scale by original aspectRatio
          ‚Ä∫else set width & height manually.
        ‚Ä¢resizing-quality: nearest neighbor, bilinear, bicubic‚íπ, bicubic smooth, bicubic sharper.
      ‚ñ¨generate multi-imgs: responsivebreakpoints.com
        ‚Ä¢upload original-img, set target: ‚Ä∫max?min-width
          ‚Ä∫size steps (20kb'recomended|40kb|80kb|‚Ä¶) ‚Ä∫more!!.
        ‚Ä¢download & copy html markup to document, & done!!!.
      ‚ñ¨chrome testing: ‚Ä¢more-tools/Developer-tools/ ctrl+shift+i
        ‚Ä¢Toggle device toolbar ctrl+shift+m
          ‚Ä∫toggle [show device pixel ratio](else: DPR=2x‚íπ).
        ‚Ä¢Network: record-downloads ctrl+r
        ‚Ä¢reload-button/Empty-Cache and Hard Reload
    ‚ñ∫art-direction (crope/aspectRatio/format-support):
      <picture>
       <source type=image/avif media=(orientation:portrite)
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='pr-s.avif 420w,pr-m 600w,pr-l 800w,pr-h 1200w'>
       <source type=image/webp media=(orientation:portrite)
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='pr-s.webp 420w,pr-m 600w,pr-l 800w,pr-h 1200w'>
       <img src=landscape-fallback.webp alt=''
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='ls-s.webp 420w,ls-m 600w,ls-l 800w,ls-h 1200w'>
       </picture>
     ‚ñ¨media='query1, query2, ‚Ä¶?'
      ‚Ä¢query:type|and? features| not?only type'R [and features]?
       ‚Ä∫type: all‚íπ| screen?print| speech‚â†supportedYet.
       ¬ªfeatures: feature [and feature]‚Ä¶?.
         ‚Ä∫feature=(name [: value]?): (aspect-ratio: w/h'ex16/9) (max?min-|w?h: length) (orientation:portrite?landscape)
         (max?min-|resolution‚â†S19: #x?dppx=96#dpi‚âà37.8#dpcm)
         (display-mode:browser?fullscreen?standalone?minimal-ui)
         (grid: 0=bitmap?1=grid) (color|:#8d(8bit=256)'0noColor)
         (any-|pointer'both|: none?coarse'touch?fine'noTouch)
         (any-|hover|: none?hover'noTouch)
      ‚Ä¢operators: ‚Ä∫,(=or): at least one query return true.
        ‚Ä∫and: all individual-features & type must return true.
        ‚Ä∫not: negation #sum of next type&features before ,(=or).
        ‚Ä∫only: unapply style-block if old-browser‚â†support @media
     ‚ñ¨artice: www.smashingmagazine.com/2016/09/automating-art-direction-with-the-responsive-image-breakpoints-generator/
     ‚ñ¨generate multi-imgs: responsivebreakpoints.com
        ‚Ä¢upload original-img, set target: ‚Ä∫max?min-width
          ‚Ä∫size steps (20kb'recomended|40kb|‚Ä¶) ‚Ä∫max-imgs:40‚Üì 
          ‚Ä∫support retina screens 2x
          ¬ªart-direction: ‚Ä∫select css width size by vw unit.
            ‚Ä∫device:mobile|tablet|small-laptop|desktop.
            ‚Ä∫aspect-ratio:w/h crope important content by analys methods as face?edges-detection visual-uniqueness.
        ‚Ä¢download & copy html markup to document, & done!!!.
  ‚ñ∂optimization:
    ‚ñ∫general strategies: ‚Ä¢opt from original-img(high resolution)
      ‚Ä¢crope unnecessary margins ‚Ä¢reuse cached imgs if possible
      ‚Ä¢use ‚úìprograms: as photoshop|sketch|paintshop-pro.
      ‚Ä¢use opt server-apps: gulp-imagemin, gulp-webp
      ‚Ä¢online services: imagecompression.com tinypng.com
        pnggauntlet.com jpegmini.com
    ‚ñ∫jpeg: ‚Ä¢reduce quality: 50~70% generally, 30~40% depending.
      ‚Ä¢blur|smooth unnecessary content expect important content.
        ‚Ä∫and blur all content by .2
      ‚Ä¢avoid hard-edges(high contrast details), work with   soft-edges(gradient contrast, less details)
        ‚Ä∫compression hard-edge = 4 √ó soft-edges file-size !!!
        ‚Ä∫use png-8 on hard-edges(or webp)
    ‚ñ∫png24(useless,use png-8|webp): ‚Ä¢avoid photographs/use-jpeg
      ‚Ä¢convert to png8(with variable transparency): tinypng.com
    ‚ñ∫png8|gif: ‚Ä¢choice flat-colors imgs (better than dithering).
      ‚Ä¢dithering:disable√ò~30% (for blend-colors only)
        (binary-gradient between two colors, create third new color to table-colors)
      ‚Ä¢table-colors: start 5bit/32color, & increase as necessary
        ‚Ä∫image‚Üímode‚Üíindex-color
‚òÖsvg:
  ‚ñ∂introduction:
    ‚ñ∫xml(eXtensible Markup Language): meta-language
      ‚Ä¢mother of: xhtml‚Üíhtml‚Üíhtml5 svg MathML RSS
      ‚ñ¨syntax(#must be): ‚Ä¢lowerCase tag|att ‚Ä¢proper nest
        ‚Ä¢quote att ‚â†extraWhiteSpaceIn ‚â†short(att‚úó‚Üíatt='att'‚úì)
        ‚Ä¢numeric unicode refer to most special characters
        ‚Ä¢contain scripts in CDATA section
        ‚Ä¢enclose els:<empty att='quote'/> <empty att=addSpace />
    ‚ñ∫svg: ‚ñ¨els: text clipPath mask ‚Ä¢raster:linearGradient filter
        ‚Ä¢drawing: circle rect ellipse path line polyline polygon
        ‚Ä¢organization: g(groupeShapes) use|symbol(reuseDrawings)
      ‚ñ¨demo: <?xml version='1.0' encoding='utf-8'?>     <!--1-->
        <svg version='1.1'                              <!--2-->
         xmlns:xlink='http://www.w3.org/1999/xlink'
         width='150' height='200' viewbox='0 0 150 200'>
        <defs> <radialGradient id='fill_effect'>        <!--3-->
          <stop offset='0' stop-color='#fff'/>
          <stop offset='1' stop-color='orange'/>
        </radialGradient></defs>
        <g id='icon-drawn'>                             <!--4-->
          <rect x='25' y='25' width='100' height='100' 
           fill='lightGreen' stroke='green' stroke-width='2'/>
          <circle cx='75' cy='75' r='40' fill='url(effect)'/>
          <path fill='none' stroke='#000' stroke-width='2'
           d='M 13 100 L 60 50 L 90 90 L 140 30'/>          </g>
        <text x='25' y='150' fill='#000' font-family='Rosemary' 
         font-zize='16'>xml &amp; svg</text>              </svg>
      ‚ñ¨descrition: (svg use px in measurement)
        ‚Ä¢1: declare external‚â†inline file, start at line1/letter1
        ‚Ä¢2: <svg> is root-el as <html>:
          ¬ªinline ‚â†require att version|xmlns|xmlns:xlink=''
            ‚Ä∫multi xml-langs required att xmlns:xlink=''
          ‚Ä∫external.svg require att xmlns=''
        ‚Ä¢3: <defs> define els|effects reused by <use>|url(#id)
        ‚Ä¢4: attributes: ‚Ä∫d:path-direction:(M:moveTo L:lineTo)
          ‚Ä∫x,y|cx,cy'circle?ellipse-center:el‚ÜíviewboxCoordinates
          ‚Ä∫r:circleRadius ‚Ä∫stroke:border ‚Ä∫fill:backGround
  ‚ñ∂featurs:
    ‚ñ∫add svg to document:
      ‚ñ¨<img>|.css{bg-image:url?image-set()}:
        cached, fastLoad / ‚â†external.js?css?rasterImg(security)
      ‚ñ¨<iframe|object>: cached, dynamic / ‚â†style.css, slowLoad
      ‚ñ¨inline <svg>: full-DOM-access, ultraFastLoad / uncached
      ‚ñ¨svgLoader: load external.svg as inline <svg> without http
        <head> <script src=svg-loader.min.js async></script>
        <body> <svg data-src=img.svg></svg>
    ‚ñ∫styling: overriding inline>embedded>external>svg-attributes
      ‚Ä¢inline:<el style=> ‚Ä¢embeded:<head|svg|defs> <style>
      ‚Ä¢external:<svg|iframe|object> <style> @import 'style.css';
    ‚ñ∫scripting: overriding inline>body>head
      ‚Ä¢inline: <svg><script> <![XDATA[ /*scrits*/ ]]>
    ‚ñ∫animations: can apply‚Üí <img>|.css{bg-image}
      ‚Ä¢@keyframes|transition:apply‚Üícss-properties ‚â†svg-attribute
      ‚Ä¢js libraries: snapsvg.io svgjs.com velocityjs.org
        ‚Ä∫path-rendering: github.com/ConnorAtherton/walkway
          lazylinepainter.info maxwellito.github.io/vivus
    ‚Ä¢Data Visualization: ‚Ä∫github.com/d3/d3/wiki/Gallery
      ‚Ä∫observablehq.com/@d3/bar-chart-transitions
    ‚ñ∫accessibility: ‚Ä¢<svg|g|anyContainer><title>
      ‚Ä¢<anyEL role=presentation|none|img‚Ä¶ ><desc>
  ‚ñ∂raster embed: <image xlink:href=url x= y= width= height= />
    ‚Ä¢inline-only ‚â†external.svg(security-reasons)
    ‚ñ∫cliping|masking: display clip of img
      ‚ñ¨clip: <svg width=600 height=400 viewbox='0 0 600 400'>
        <defs> <clipPath id=star-shape>
          <polygon points='390,12 440,154 590,157 470,250 513,
           393 390,307 266,393 310,248 189,157 340,154 390,12' style=fill:none /> </clipPath> </defs>
        <image xlink:href=img.webp width=600 height=400
         style=clip-path:url(#star-shape) />       </svg>
      ‚ñ¨mask: display clip of img by opacity based on lightness of solid-color|gradient|image, darker-color‚Üí+invisibility
       <defs> <linearGradient id=alpha_effect>
          <stop offset=0 stop-color=#fff />
          <stop offset=100% stop-color=#000 /> </linearGradient>
        <mask id=mask_effect x=0 y=0 width=400 height=381>
          <polygon points='390,12 440,154 590,157 470,250 513,393 390,307 266,393 310,248 189,157 340,154 390,12' style=fill:url(#alpha_effect) />  </mask>      </defs>
       <image xlink:href=img.webp width=600 height=400
        style=mask:url(#mask_effect) />
    ‚ñ∫filter: <svg width=600 height=600 viewbox='0 0 600 600'>
     <defs> <filter id=blur>
        <feGaussianBlur in=SourceGraphic stdDeviation=4 />
       </filter> <filter id=shadow>
        <feGaussianBlur in=SourceAlpha stdDeviation=8 result=blur />
        <feOffset in=blur dx=9 dy=7 result=offsetBlur />
        <feMerge> <feMergeNode in=offsetBlur />
          <feMergeNode in=SourceGraphic /> </feMerge> </filter>
      </defs>
      <ellipse cx=150 cy=500 rx=150 ry=100 style=fill:red />
      <ellipse cx=450 cy=500 rx=150 ry=100
       style=fill:red;filter:url(#blur) />
      <polygon points='390,12 440,154 590,157 470,250 513,393 390,307 266,393 310,248 189,157 340,154 390,12' style=fill:red;filter:url(#shadow) />               </svg>
     ‚ñ¨attributes: ‚Ä∫rx|ry:ellipse-vertical?horizontal-radius
      ‚Ä∫stdDeviatBlur:blur-radius-amount ‚Ä∫dx|dy:offset-distance
  ‚ñ∂reuse/recycle:
    <svg> <symbol id=x viewBox='0 0 150 200'> ‚Ä¶ </symbol>
      <use xlink:href=#x> </svg>
    <svg style=width:60vw;height:80vw> <use xlink:href=#x></svg>
    ‚Ä¢<symbol> store els|effects as <defs>, scalable by viewBox=
    ‚Ä¢<use> call <g>|<defs>|<symbol> content.
  ‚ñ∂responsive:
    ‚ñ∫view-control: 
      ‚ñ¨viewport: as window display slice|full svg
        ‚Ä¢Established by width|height=100%D in <svg|img|iframe>
      ‚ñ¨viewBox='minX minY width height': as telescope(pan&zoom)
        ‚Ä¢default‚Üí'0 0 viewport-width viewport-height'
        ‚Ä¢panning‚Üê‚Üë‚Üì‚Üí(move view): minX minY
        ‚Ä¢zooming: ‚Ä∫out-: width > viewport-w, height > viewport-h
          ‚Ä∫in+: width < viewport-w, height < viewport-h
        ‚Ä¢apply to svg|symbol|pattern|marker|view
    ‚ñ∫preserveAspectRatio='<align> slice?meet'
      ‚Ä¢indicate how to fit el if viewBox(w:h) have different aspectRatio than viewport(w:h)
      ‚Ä¢default‚Üí='xMidYMid meet', preserveAR+alignCenter+contain
      ‚ñ¨meet=contain, slice=cover
      ‚ñ¨<align>: align coordinates of viewBox & viewport
        ‚Ä∫none: stretch‚Üíviewport, ‚â†preserveAR, ignore meet?slice
        ‚Ä∫xMinYMin: viewBox(minX|Y=0):viewport(x|y=0%):   0%   0%
        ‚Ä∫xMinYMid: minX=0:x=0, minY=height/2:y=vpH/2 :   0%  50%
        ‚Ä∫xMinYMax: minX=0:x=0, minY=h:y=vpH          :   0% 100%
        ‚Ä∫xMidYMin: minX=w/2:x=w/2, minY=0:y=0        :  50%   0%
        ‚Ä∫xMidYMid: minX=w/2:x=w/2, minY=h/2:y=vpH/2  :  50%  50%
        ‚Ä∫xMidYMax: minX=w/2:x=w/2, minY=h:y=vpH      :  50% 100%
        ‚Ä∫xMaxYMin: minX=w:x=w, minY=0:y=0            : 100%   0%
        ‚Ä∫xMaxYMid: minX=w:x=w, minY=h/2:y=vpH/2      : 100%  50%
        ‚Ä∫xMaxYMax: minX=w:x=w, minY=h:y=vpH          : 100% 100%
    ‚ñ∫issues: ‚ñ¨viewBox without viewport(w:h): IE‚Üíw=300px,h=150px 
        ‚Ä¢fix: set width=100% height=auto
      ‚ñ¨adabtive icon: lose details if scaled-down
        ‚Ä¢fix: ‚Ä∫create sprite.svg have multiVersions
          @media (max-width:big‚ÜíSmall){svg els{/*change*/}}
