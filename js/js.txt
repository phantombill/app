‚ñ∂‚ñ∫‚óÑ‚ñ≤‚ñº‚òÖ‚ô•‚ñ¨‚Ä¢¬ª‚Ä∫‚ö†Ô∏èüí°‚öôÔ∏è¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚íπ„äø‚Ä†‚Ç±‚Ä¶
‚òÖconsepts: its riginal name was live-script ‚â†java.
  ‚ñ∫place into document: in <head> or just before </body>.
    ‚Ä¢embedded: <script>‚Ä¶</script>
    ‚Ä¢external: <secript src=path/file.js>/*√ò*/</script>
  ‚ñ∫loading: <script> pause HTML-parse until (fetch & execute).
   <s defer*src> parallel(fetch,parse), execute after parse-End
   <s async*src> parallel(fetch,parse), pauseParse until execute
‚òÖdata types:
  ‚ñ∫literal:
    ‚ñ¨undefned‚íπ if var declared without initialized.
    ‚ñ¨null: Define this var, but give it no inherent value
    ‚ñ¨boolean: true !false anyVal|false !true NaN''null0undifined
    ‚ñ¨number: ‚Ä¢integer: ¬±#‚â†.0 ‚Ä¢decimal'float: ¬±#.f ‚Ä¢double
    ‚ñ¨string: ‚Ä¢sequence of characters quoted by `|'|"
      ‚Ä¢+|+=operator concat str+str|str+number //string.
      ‚Ä¢backTick template: `str${<expression>str}` preserve WS
      ‚Ä¢\escape just before: \\ \' \" \n?u{a}=newLine \t?u{9}=tab \r?u{d}=carriageReturn \f?u{c}=formFeed \b?u{8}=backSpace \v?u{b}=lineTabulation
        ‚Ä∫\uHHHH \u{H~HHHHHH} \xHH
    ‚ñ¨array: [√ò|item,‚Ä¶?]
      ‚Ä¢items are members of ordered data(even[]&{}) comma separated surrounded by brackets[], indexed from 0
      ‚Ä¢accessed only by index arr[#].
    ‚ñ¨object: {√ò|property:value,method:function(){},‚Ä¶?}
  ‚ñ∫‚â†literal: varName|func()|(n?operator)
    ‚ñ¨func(): ‚Ä¢Worning: if assigned‚Üívar, start runing immediately
      ‚Ä¢if contain return: run until return, store returned data.
      ‚Ä¢if return omitted: run all the block, store undefined.
‚òÖbuld-in functions| properties and methods:
  ‚Ä¢everything object: window:{document:{html:{body:{‚Ä¶}}}}
  ‚ñ∫DOM:Api translate html?xml‚Üí nodesTree accessed by js?ruby?c#‚Ä¶
    ‚Ä¢node in html: el, att, text
    ‚Ä¢document: object represent all html nodes.
      document.getElementById('id').appendChild(
        document.createElement('p').appendChild(
          document.createTextNode('Hi')));
      //<el id=id> now contain <p>Hi</p> as last child
   ‚ñ¨properties
    title //<title>
    body //<body>
    innerHTML //markup
    innerText //output text
    textContent
    parentNode
    style.<cssProperty> //css:hyphen-property ‚Üí js:camelCase
   ‚ñ¨methods
    ‚Ä¢access: singleElement|collection[index]
      $() //in-jQuery === document.querySelectorAll()
      querySelectorAll('s1, ‚Ä¶', ‚Ä¶)
      querySelector('selector')
      getElementById('id') //return 1el
      getElementsByClassName('c1 c2 ‚Ä¶') //els share same classes
      getElementsByTagName('tag') //return all <tag> els
    ‚Ä¢manipulate
      createElement('tag') //saved in memory until we add it
      createTextNode('text') //saved in memory until we add it
      n.cloneNode(boolean)//return copy of node & its subTree?
        //sync issue: .before?after?insertBefore?insertAfter?replaceChild()
      appendChild(node) //#move node‚Üí other parent as last-child
      insertBefore(newNode, previosChild)//move node‚Üías sibling
      insertAfter(newNode, previosNode)//move node‚Üías sibling
      before(n1,‚Ä¶) //p.before(h1, hr)
      after(n1,‚Ä¶) //h1.after(hr, p)
      replaceChild(newNode, previosNode)
        //div[0].replaceChild(newText, paragraph[0]);
      removeChild(node) //div[0].removeChild(paragraph[1]);
    ‚Ä¢att: getAttribute('att') setAttribute('att', 'value')
  ‚ñ∫events:
    ‚ñ¨mechanisms: obj.addEventListener('event',l,boolean?option)‚úì
    |<el onevent=l()|/*code*/> ‚úñ| n.onevent=l ‚úñ
    ‚ñ¨on|event:
     ‚Ä¢window: ¬ªdesktop: on|mousemove, mouseover, mouseout
      ¬ªgeneral:DOMContentLoaded, devicemotion, deviceorientation
        ‚Ä∫on| focus, blur, load, beforeunload, unload, error, pagehide, pageshow, resize, copy, cut, paste, offline, online, hashchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
     ‚Ä¢document: ¬ªm: on|touchend,touchcancel,touchmove,touchstart
      ¬ªgeneral: on|click, dblclick, scroll, input, change, visibilitychange, copy, cut, paste, selectstart, selectionchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
      ¬ªdesktop: DOMContentLoaded, readystatechange
        ‚Ä∫on|wheel, drag, dragend, dragenter, dragleave, dragover, drop, fullscreenchange, fullscreenerror, keyup, keydown, keypress(removed)
    ‚ñ¨listener(eventHandler):funcName| function(){/*anonymous*/}|
      ()=>{}| (function(){/*temporary scope*/})()
      ‚Ä¢automaticly pass event parameter to the func listener
        funcName‚ÜífuncName(e)
    ‚ñ¨boolean: false‚íπ//targer‚Üíbubbling, true//capturing‚Üítarget
     phases run by order: nested els have same 'event'
      ‚Ä¢capturing: check&run listeners from window ‚Üí‚Ä¶‚Üí parent
      ‚Ä¢target: check&run listener registed on e.target, thene if e.bubbles==true‚íπ: propagates evt to parent ‚Üí‚Ä¶‚Üí window
      ‚Ä¢bubbles up: check&run listeners from parent ‚Üí‚Ä¶‚Üí window
      ‚Ä∫if we add two addEventListener() one false & other true:
        phases: capturing ‚Üí target ‚Üí target again ‚Üí bubling
      ‚Ä∫to prevent capturing|bubbling, listener must be:   
        e=>{e.stopPropagation();‚Ä¶}
      ‚Ä∫to target just all childrens of parent:
        parent.addEventListener('event', e=>{e.target.‚Ä¶;‚Ä¶})
      ‚Ä∫to target just parent:
        p.addEventListener('event', e=>{e.currentTarget.‚Ä¶;‚Ä¶})
    ‚Ä¢options: {
      once: boolean, //call .removeEventListener() after 1listen
      capture: boolean, //??
      passive: boolean, //??
      signal: controller.signal //can passed to many listeners
        //on topLvl: const controller = new AbortController()
        //remove any/all listeners: controller.abort()
     }
    ‚ñ¨multi listeners on one event:
      obj.addEventListener('sameEvent',l1)
      obj.addEventListener('sameEvent',l2)
    ‚ñ¨removeEventListener('event', funcName)//unlisten
    ‚ñ¨remove all: const controller = new AbortController();
      obj.addEventListener('event',l,{signal:controller.signal})
      controller.abort() //unlisten to any event share {signal}
  ‚ñ∫native functions: window.func()
    ‚ñ¨dialog box(show message): ‚Ä¢prompt(req)//[input],(ok)submit
      ‚Ä¢alert(m)//(ok) ‚Ä¢confirm(question)//(ok)true|(cancle)false
    ‚ñ¨return val: ‚Ä¢Date()//date time day GMT
      ‚Ä¢setTimeout(funcName, #'ms) //delay calling funcName()
  ‚ñ∫literal properties & methods:
    ‚ñ¨number:
      n.toFixed(+#) //round n.10^#
      (#).toString() //'#'
      Math.floor(#.f) //#
      Math.rendom() //0‚â§return<1
    ‚ñ¨string:
      str[i]//character nth i+1
      .length//#
      Number(√ò?''|'#'|'‚â†#')//0|#|NaN
      parseInt('#'|√ò?''?'‚â†#')//#|NaN
      .includes?startsWith?endsWith(subStr)//boolean
      .indexOf(subStr, from=0)//#,-1
      .slice(start=0,end=str.length)//str‚íπ,'str[s]‚Ä¶str[e-1]'
      .toLowerCase?toUpperCase()//string
      .replace?replaceAll(subStr,newSubStr)//string
      .split(separator,limit?)//[array]
        'a/b/c'.split('/',2) //['a','b']
    ‚ñ¨array:
      arr[i][i] //item nth i+1 of nested arr nth i+1
      .indexOf(item)//+#,-1
      .push(i,‚Ä¶?)//#(arr.length + [i,‚Ä¶?].length), add‚Üíend.
      .unshift(i,‚Ä¶?)//#(new.length), add‚Üístart.
      [‚Ä¶,last].pop()//last, remove last item.
      [first,‚Ä¶].shift()//first, remove first item.
      .splice(start=0,count)//[]‚íπ,[arr[s],‚Ä¶],remove [arr[s]‚Ä¶]
      .map(fN) //({ newArr:[], m:function(){
          for (const i of arr){this.newArr.push(fN(i))}
          return this.newArr} }).m()
        [1,3,5].map(i=>i*2) //[2,6,10]

      .filter(fN'condition)//[matchedItems‚Ä¶]
        //({ newArr:[], m:function(){
          for (const i of arr){if(fN(i)){this.newArr.push(i)}}
          return this.newArr} }).m()
        [0,'1',2,'3'].filter(i=>typeof(i)=='number') //[0,2]
        ['ccc','a','bb'].filter(i=>i.length>=2) //['ccc','bb']
      .toString() //'arr[0],‚Ä¶,arr[arr.length-1]'
      .join(separator=',') //'arr[0],‚Ä¶,arr[arr.length-1]'
‚òÖstatements:
  ‚ñ∫operators: order: ! ¬±unary,*%/,+-,<=>,== !=,&&,||,?:
    ‚ñ¨numeric:+add -subtract *multi /divid %reminder **exponent
      ‚Ä¢increment++ decrement-- by 1 without return sum
        ++increment --decrement by 1 & return sum
      ‚Ä¢assignment: varName =|+=|-=|*=|/=|%=|**=|‚Ä¶ value
    ‚ñ¨comparison:===identical'val&type ==equality !== != <=>'#
    ‚ñ¨logical: !(not) &&(and) ||(or)
      ‚Ä¢!exp//oppsite-boolean notT=F notF=T !0=T !NaN=T !1=F ‚Ä¶
      ‚Ä¢exp&&exp//TandT=true,false ‚Ä¢exp||exp//ForF=false,true
    ‚ñ¨string: +|+=concatecation str+str?n//string
    ‚ñ¨ternary: (condition) ? /*if true run this*/ : /*else this*/
    ‚ñ¨typeof <expression> //number|string|object
  ‚ñ∫variable: store reusabel data.
    ‚ñ¨dec&init: const?let name=value,‚Ä¶?;
     ‚Ä¢declaring: const?let name1,‚Ä¶?; ‚ñ¨initializing: name=update;
       ‚Ä∫let declare updatable var, const declare ‚â†updatable var.
       ‚Ä∫const array=[‚Ä¶],object={‚Ä¶}; //content ‚Ä¶ can be updated!.
    ‚ñ¨name: [‚â†0~9][a~Z 0~9 _]‚Ä¶?, case-sensitive, ‚â†js-statement.
    ‚ñ¨scope: ‚Ä¢topLvl: const?let golbal=v; //available everywhere
      ‚Ä¢in function:
        ‚Ä∫const?let local=v; //accessed only in this func.
        ‚Ä∫global=v; //call it will declare global var, undifined
          //issue: unexpected errors, fix: avoid this method.
      ‚Ä¢IIFE: Immediately Invoked Functional Expression
        (function(){local=v}()) //func isolation, local scope
  ‚ñ∫function:
    ‚ñ¨custome function:
      ‚Ä¢definition: function fName(args?){‚Ä¶;return ‚Ä¶;/*ignored*/}
      ‚Ä¢invoke=call=execute: fName(a?)//before||after definition
      ‚Ä¢parentheses() Invoke it Immediately, even if we assign it to variable or as other function argument.
    ‚ñ¨anonymous=nameless: function(){} //usefull as parameter
    ‚ñ¨arrow: (arg1,‚Ä¶)=>{‚Ä¶;return? ‚Ä¶}
      ‚Ä¢only 1 parameter: arg=>{‚Ä¶;return? ‚Ä¶}
      ‚Ä¢only 1 invoked?returned line: (a1,‚Ä¶)=>‚Ä¶
    ‚ñ¨scope: ‚Ä¢global: function(){};
      ‚Ä¢temporary: (function(){})();
    ‚ñ¨argumets: optional? if arg=initialized, can be comma list
    ‚ñ¨block{}: can contain variables, loops, functions, ?
    ‚ñ¨return keyword:
      ‚Ä¢stop executing, & ignored below code.
      ‚Ä¢give the fonction ability to be a variable with dynamic value (can be customized by arguments).
      ‚Ä¢if 'return' omitted, return undefined
  ‚ñ∫flow control:
    ‚ñ¨if(condition1 met){ //execute block1
        }else if(condition2 met) { //execute block2
        }‚Ä¶else{ //execute last-block}
      ‚Ä¢condition: boolean|operator == != === !== <=>|method|func
        true !false anyVal|false !true NaN''null0undifined
      ‚Ä¢block can contain 'return', nest other if statement.
    ‚ñ¨switch(<choice>'exp) { case <choice1>: /*code1*/; break
                            case <choice2>: /*code2*/; break ‚Ä¶
                            default?: //code }
    ‚ñ¨for (const i of arr) {console.log(i)}
      for (let i=0; i<arr.length; i++) {console.log(arr[i])}
      ‚Ä¢break keyword stops loop entirely.
      ‚Ä¢continue keyword skips current instance of loop to next
      ‚Ä¢scope issue: nested funcs treats vars globally, fix:
        (function(i){return function(){/*temporary vars*/} })(i)
      ‚Ä¢benefits: ‚Ä∫we can apply styles to list of elements.
        ‚Ä∫add|remove|change attributes to each element from long list(like inputes).
        ‚Ä∫creat arrays to build filters of search element & ‚Ä¶
    ‚ñ¨while(condition){}| do{}while(condition)
      ‚Ä¢break keyword stops loop entirely.
      ‚Ä¢continue keyword skips current instance of loop to next
  ‚ñ∫object:
    ‚ñ¨literal object: created manually
      const leteralObjectName = {
        propertyMemberName: data, ‚Ä¶, //as variables
        methodMemberName(){}, ‚Ä¶, //as functions
          methodMemberName: function(){}, ‚Ä¶ //old syntax
      }
    ‚ñ¨access members: const obj = { pro:{pro1:data}, method(){} }
      ‚Ä¢by Dot.notation:  obj.pro.pro1 //return data.
        obj.method() //invoke its {/*block*/}.
      ‚Ä¢by bracket-notation[dynamicVariable]:
        obj['pro']['pro1'] //return data.
        obj['method']() //invoke its {/*block*/}.
      ‚Ä¢this keyword: refers to current object.
    ‚ñ¨updating existing members:
      obj.pro.pro1|obj['pro']['pro1'] = update
      obj.method|obj.['method'] = ()=>{/*update*/}
    ‚ñ¨setting new members:
      obj.pro.newPro|obj['pro']['newPro'] = data;
      obj.newMethod|obj['newMethod'] = ()=>{}
    ‚ñ¨construction:
      ‚Ä¢consept: everything are inctance of build-in object
        ex: any 'string' we create automaticly are instance of build-in string object, and share all its properties and methods.
      ‚Ä¢old trick:
        function createNewObj(args){
          return {property: data, method(){}} }
        const instance = createNewObj(args);
      ‚Ä¢new keyword:
        function refersToNewObj(args){
          this.property = data; this.method = ()=>{} }
        const instance = new refersToNewObj(args)
          ‚Ä∫create a new object.
          ‚Ä∫match 'this keyword' to the new object.
          ‚Ä∫run the code in the constructor.
          ‚Ä∫return the new object.
    ‚ñ¨prototype chain:
      ‚Ä¢default & last chain: Object.prototype.__proto__//null
        Object.protorype = {
          constructor: ∆í Object(),
          hasOwnProperty: ∆í hasOwnProperty(),
          isPrototypeOf: ∆í isPrototypeOf(),
          propertyIsEnumerable: ∆í propertyIsEnumerable(),
          toLocaleString: ∆í toLocaleString(),
          toString: ∆í toString(),
          valueOf: ∆í valueOf(),
          __defineGetter__: ∆í __defineGetter__(),
          __defineSetter__: ∆í __defineSetter__(),
          __lookupGetter__: ∆í __lookupGetter__(),
          __lookupSetter__: ∆í __lookupSetter__(),
          __proto__: null,
          get __proto__: ∆í __proto__(),
          set __proto__: ∆í __proto__()
        }
      ‚Ä¢shadowing properties:
        calling ourObj.member will check for member in ourObj
          else in its ourObj.__proto__, 
          else in ourObj.__proto__.__proto__, else ...,
          else & lastly in Object.prototype
        if find it call it & end prototype chain immediately
        else return undefined.
      ‚Ä¢accessing obj prototype:
        myObj.__proto__ ‚úó| Object.getPrototypeOf(myObj) ‚úì
      ‚Ä¢setting a prototype:
        ‚Ä∫using Object.create():
          const ourProto = {‚Ä¶}
          const instance = Object.create(ourProto)
          Object.getPrototypeOf(inctance) //ourProto
          Object.getPrototypeOf(ourProto) //Object.prototype
        ‚Ä∫using constructor:
          const templateProto = {
            greet() { console.log(`hi I'm ${this.name}!`) }
          }
          function template(name){this.name=name}
          template.prototype = templateProto
          template.prototype.constructor = template
          //by default template.prototype.constructor = Object
          const instance1 = new template('instance1')
          instance1.greet() //hi I'm instance1
      ‚Ä¢own property
        Object.hasOwn(ourObj,'property?method Name')//boolean
        if member defined in the instance as ins.member //true
        else if defined in constructor as this.member //true
        else if defined in constructor without this. //false
        else if defined in prototype //false
  ‚ñ∫object oriented programming: pseudo code:
    ‚ñ¨classes & instances:
          ‚Ä¢class templateName
            properties
              pro1
              pro2
            constructor
              templateName(pro1,pro2)
            methods
              method1()
              method2()
          ‚Ä¢instance1 = new templateName(v1,v2)
            instance2 = new templateName(v3,v4)
            instance1.pro1 //v1
            instance1.pro2 //v2
            instance2.pro1 //v3
            instance2.pro2 //v4
    ‚ñ¨inheriance: (extends)
          ‚Ä¢class superParent
            properties
              pro1
            constructor
              superParent(pro1)
            methods
              method1()
              method2()
          ‚Ä¢class subChild1 : extends superParent
            properties
              //pro1 inherited from superParent class
              pro2
            constructor
              subChild1(pro1,pro2)
            methods
              //method1 inherited from superParent class
              method2()//polymorphism:override the inherited one
              method3()
    ‚ñ¨encapsulation: in js private member name star with _
      ‚Ä¢class subClass : extends superClass
            properties
              private pro
            methods
              multi(multiplay){return this.pro * multiplay}
      ‚Ä¢instance = new subClass
            instance.pro //error: pro private of subClass
  ‚ñ∫class: template allow us consructor derive instances.
    ‚ñ¨classes & constructors:
      class super{
        pro; //optional, can be initialized pro=val.
        constructor(arg){ this.pro = arg }//pro auto-declared
        method(){ console.log(`hi I'm ${this.pro}`) }
       }
      ‚Ä¢constructor will: can be omitted(default auto-generated)
        create new object
        match this keyword in the now object
        run the code in the constructor
        return the new object
    ‚ñ¨inheritance:
      class sub extends super{
        constructor(arg1,arg2){
          super(arg1) //super.constructor(arg1){this.pro=arg1}
          this.pro2 = arg2
        }
       }
    ‚ñ¨Encapsulation: prefix member by #name
      class ex{
        #privatPro //must be declared, not optional.
        constructor(arg){ this.#privatPro = arg }
        public(){ this.#private() }
        #private(){ console.log('I\'m private') }
      }
      const ins = new ex()
      ins.public() //I'm private
      ins.#private() //syntax error
      ins.#privatPro //syntax error
  ‚ñ∫json(javaScript object notation):
    ‚ñ¨importing:
      async fn(){
        const request = new Request('url.json')
        const response = await fetch(request)
        const jsonObj = await response.json()
        //const deSerialization = await Json.parse(response.text())
        //const serialization = Json.stringify(deSerialization)
      }; fn()
    ‚ñ¨json are string usefull to transmit data between server & client
    ‚ñ¨can contain single #number, [array], {object}, 'string'
    ‚ñ¨we required to double quote objects "properties": value 
    ‚ñ¨there no methods in objects.
  ‚ñ∫promise: (synchronous ‚â† asynchronous)
    ‚ñ¨demo:
      const api = api(arg)
      console.log(api) //Promise {<pending>}
      api.then(resp => console.log('response: ' + resp.status))
      console.log('I\'ll log before Promise "settled"')
    ‚ñ¨chaining promise:
      api(arg)
        .then(a => doSomthing(a)) //return promise
        .then(a => doThis(a))
    ‚ñ¨catching errors:
      api(arg)
        .then() //invoked if promise fulfilled
        .then() //invoked if promise fulfilled
        .catch(err=>console.error(`error: ${err}`))
          //invoked if promise rejected
    ‚ñ¨primary promise states:
      ‚Ä¢pending: the initial state, until settled.
      ‚Ä¢settled:
        ¬ªfulfilled: return value(# || 'str' || {}).
          ‚Ä∫invoke then()'s one by one
        ¬ªrejected: because of reason(prevent fulfillement).
          ‚Ä∫invoke catch()
    ‚ñ¨combining multiple promises:
      ‚Ä¢Promise.all([promise1, ‚Ä¶])
        .then() //invoked if all promises fulfilled
        .then( responses => {
          for (const response of responses) {
            if (!response.ok) {
              throw new Error(response.status)
            }
            console.log(`${response.url}: ${response.status}`)
          }
        })
        .catch() // invoked if any promise rejected
      ‚Ä¢Promise.any([promise1, ‚Ä¶])
        .then() //invoked if any promise fulfilled
        .catch() //invoked if all promises rejected
    ‚ñ¨new syntax: then ‚Üí await
      async function name() {
        try{
          const response = await fetch('url.json')
          if (!response.ok) {
            throw new Error(`HTTP error: ${response.status}`)
          }
          const json = await responce.json()
          return json
        }
        catch(err) { console.error(err) }
      }
      name() //don't wait, parse next line.
    ‚ñ¨resolve:
      ‚Ä¢resolve():
        const myPromise = new Promise((resolve,reject) => {
          //doSomthing ‚Üí fulfillement
          if (fulfillement){
            resolve('pass fulfillement value or promise')
          } else { reject() }
        })
      ‚Ä¢return promise():
        function name() {
          return func1().then(r => return func2(r))
        }
      ‚Ä¢Promise.resolve(input)
        .then(x => /*doSomthing*/)
        //promise chain
  ‚ñ∫workers:
    ‚ñ¨dedecated workers: used by single script instance.
      ‚Ä¢demo:
        //main.js:
        const worker = new Worker('path/worker.js')
        document.querySelector('button').addEventListener('click', () => {
          worker.postMessage({
            command: 'doTask1',
            otherJsonProperty: 'passValue'
          })
          worker.addEventListener('message', m => 
            document.querySelector('output').textContent = m.data
          , { once: true })
        }, { once: true })
        
        //worker.js:
        addEventListener('message', m => {
          if (m.data.command === 'doTask1') {
            task1(m.data.otherJsonProperty)
          }
        })
        function task1(arg){
          //doSomthing to arg ‚Üí result
          postMessage(result)
        }
      ‚Ä¢seprate script run in its oun thread (each cpu(2~8) core can parse limeted number(1~4) of thread)
    ‚ñ¨shared workers: used by script's runing in differ windows
    ‚ñ¨server workers: like proxy server, cache resource for offline usage.
  ‚ñ∫apis(application programming interface):
    ‚ñ¨shared:
      ‚Ä¢all apis based on Objects store data in prop#erties and functionality on methods.
      ‚Ä¢all have one entry point object contain all properties && methods like document|audioContext
      ‚Ä¢almost all have events hanlers
      ‚Ä¢often have additional security mechanisms (same-origin policy| Notifications api| autoplay policy| ‚â†offline)
    ‚ñ¨
‚òÖ
‚ñ¨‚ñ¨‚ñ¨2022‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
‚ñ∂‚ñ∫‚óÑ‚ñ≤‚ñº‚òÖ‚ô•‚ñ¨‚Ä¢¬ª‚Ä∫‚ö†Ô∏èüí°‚öôÔ∏è¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚íπ„äø‚Ä†‚Ç±‚Ä¶
typescript
‚òÖintroduction
