▶▪◄▲▼⋆♥▸•»›⚠️️💡⚙️±×÷²√π⁰≠≈≤≥Ø∞✓✗✖ € ← → ↑ ↓ ⇆♪©Ⓓ㊿†₱…
⋆concepts: renamed from liveScript to javaScript
  ▪place into document: in <head> or just before </body>.
    •embedded: <script>…</script>
    •external: <secript src=path/file.js>/*Ø*/</script>
  ▪loading: <script> pause HTML-parse until (fetch & execute).
   <s defer*src> parallel(fetch,parse), execute after parse-End
   <s async*src> parallel(fetch,parse), pauseParse until execute
⋆data types:
  ▪literal:
    ▸undefnedⒹ if var declared without initialized.
    ▸null: Define this var, but give it no inherent value
    ▸boolean: true !false anyVal|false !true NaN''null0undifined
    ▸number: •integer: ±#≠.0 •decimal'float: ±#.f •double
    ▸string: •sequence of characters quoted by `|'|"
      •+|+=operator concat str+str|str+number //string.
      •backTick template: `str${<expression>str}` preserve WS
      •\escape just before: \\ \' \" \n?u{a}=newLine \t?u{9}=tab \r?u{d}=carriageReturn \f?u{c}=formFeed \b?u{8}=backSpace \v?u{b}=lineTabulation
        ›\uHHHH \u{H~HHHHHH} \xHH
    ▸array: [Ø|item,…?]
      •items are members of ordered data(even[]&{}) comma separated surrounded by brackets[], indexed from 0
      •accessed only by index arr[#].
    ▸object: {Ø|property:value,method:function(){},…?}
  ▪≠literal: varName|func()|(n?operator)
    ▸func(): •Worning: if assigned→var, start runing immediately
      •if contain return: run until return, store returned data.
      •if return omitted: run all the block, store undefined.
⋆operators: order: ! ±unary,*%/,+-,<=>,== !=,&&,||,?:
  ▪numeric:+add -subtract *multi /divid %reminder **exponent
    •increment++ decrement-- by 1 without return sum
      ++increment --decrement by 1 & return sum
    •assignment: varName =|+=|-=|*=|/=|%=|**=|… value
  ▪comparison:===identical'val&type ==equality !== != <=>'#
  ▪logical: !(not) &&(and) ||(or)
    •!exp//oppsite-boolean notT=F notF=T !0=T !NaN=T !1=F …
    •exp&&exp//TandT=true,false •exp||exp//ForF=false,true
  ▪string: +|+=concatecation str+str?n//string
  ▪ternary: (condition) ? /*if true run this*/ : /*else this*/
  ▪typeof <expression> //number|string|object
⋆built-in objects:
  •everything object: window:{document:{html:{body:{…}}}}
  ▪DOM:Api translate html?xml→ nodesTree accessed by js?ruby?c#…
    •node in html: el, att, text
    •document: object represent all html nodes.
      document.getElementById('id').appendChild(
        document.createElement('p').appendChild(
          document.createTextNode('Hi')));
      //<el id=id> now contain <p>Hi</p> as last child
   ▸properties
    title //<title>
    body //<body>
    innerHTML //markup
    innerText //output text
    textContent
    parentNode
    style.<cssProperty> //css:hyphen-property → js:camelCase
   ▸methods
    •access: singleElement|collection[index]
      $() //in-jQuery === document.querySelectorAll()
      querySelectorAll('s1, …', …)
      querySelector('selector')
      getElementById('id') //return 1el
      getElementsByClassName('c1 c2 …') //els share same classes
      getElementsByTagName('tag') //return all <tag> els
    •manipulate
      createElement('tag') //saved in memory until we add it
      createTextNode('text') //saved in memory until we add it
      n.cloneNode(boolean)//return copy of node & its subTree?
        //sync issue: .before?after?insertBefore?insertAfter?replaceChild()
      appendChild(node) //#move node→ other parent as last-child
      insertBefore(newNode, previosChild)//move node→as sibling
      insertAfter(newNode, previosNode)//move node→as sibling
      before(n1,…) //p.before(h1, hr)
      after(n1,…) //h1.after(hr, p)
      replaceChild(newNode, previosNode)
        //div[0].replaceChild(newText, paragraph[0]);
      removeChild(node) //div[0].removeChild(paragraph[1]);
    •att: getAttribute('att') setAttribute('att', 'value')
  ▪native functions: window.func()
    ▸dialog box(show message):
      •prompt(title,default?)
        msg,[input],(ok)submit,(cancle)null
      •alert(m)//(ok)
      •confirm(question)//(ok)true|(cancle)false
    ▸return val: •Date()//date time day GMT
      •setTimeout(funcName, #'ms) //delay calling funcName()
  ▪literal properties & methods:
    ▸number:
      n.toFixed(+#) //round n.10^#
      (#).toString() //'#'
      Math.floor(#.f) //#
      Math.rendom() //0≤return<1
    ▸string:
      str[i]//character nth i+1
      .length//#
      Number(Ø?''|'#'|'≠#')//0|#|NaN
      parseInt('#'|Ø?''?'≠#')//#|NaN
      .includes?startsWith?endsWith(subStr)//boolean
      .indexOf(subStr, from=0)//#,-1
      .slice(start=0,end=str.length)//strⒹ,'str[s]…str[e-1]'
      .toLowerCase?toUpperCase()//string
      .replace?replaceAll(subStr,newSubStr)//string
      .split(separator,limit?)//[array]
        'a/b/c'.split('/',2) //['a','b']
    ▸array:
      arr[i][i] //item nth i+1 of nested arr nth i+1
      .indexOf(item)//+#,-1
      .push(i,…?)//#(arr.length + [i,…?].length), add→end.
      .unshift(i,…?)//#(new.length), add→start.
      […,last].pop()//last, remove last item.
      [first,…].shift()//first, remove first item.
      .splice(start=0,count)//[]Ⓓ,[arr[s],…],remove [arr[s]…]
      .map(fN) //({ newArr:[], m:function(){
          for (const i of arr){this.newArr.push(fN(i))}
          return this.newArr} }).m()
        [1,3,5].map(i=>i*2) //[2,6,10]

      .filter(fN'condition)//[matchedItems…]
        //({ newArr:[], m:function(){
          for (const i of arr){if(fN(i)){this.newArr.push(i)}}
          return this.newArr} }).m()
        [0,'1',2,'3'].filter(i=>typeof(i)=='number') //[0,2]
        ['ccc','a','bb'].filter(i=>i.length>=2) //['ccc','bb']
      .toString() //'arr[0],…,arr[arr.length-1]'
      .join(separator=',') //'arr[0],…,arr[arr.length-1]'
    
    ▸arrays: 40 method
      constructor: Array()
      Array.isArray(arr)//boolean, alternative to typeof
      Array.
⋆statements:
  ▪variable: store reusabel data.
    ▸dec&init: const?let name=value,…?;
     •declaring: const?let name1,…?; ▸initializing: name=update;
       ›let declare updatable var, const declare ≠updatable var.
       ›const array=[…],object={…}; //content … can be updated!.
    ▸name: [≠0~9][a~Z 0~9 _]…?, case-sensitive, ≠js-statement.
    ▸scope: •topLvl: const?let golbal=v; //available everywhere
      •in function:
        ›const?let local=v; //accessed only in this func.
        ›global=v; //call it will declare global var, undifined
          //issue: unexpected errors, fix: avoid this method.
      •IIFE: Immediately Invoked Functional Expression
        (function(){local=v}()) //func isolation, local scope
  ▪function:
    ▸custome function:
      •definition: function fName(args?){…;return …;/*ignored*/}
      •invoke=call=execute: fName(a?)//before||after definition
      •parenthesis() Invoke it Immediately, even if we assign it to variable or as other function argument.
    ▸anonymous=nameless: function(){} //usefull as parameter
    ▸arrow: (arg1,…)=>{…;return? …}
      •only 1 parameter: arg=>{…;return? …}
      •only 1 invoked?returned line: (a1,…)=>…
    ▸scope: •global: function(){};
      •temporary: (function(){})();
    ▸argumets: optional? if arg=initialized, can be comma list
    ▸block{}: can contain variables, loops, functions, ?
    ▸return keyword:
      •stop executing, & ignored below code.
      •give the fonction ability to be a variable with dynamic value (can be customized by arguments).
      •if 'return' omitted, return undefined
  ▪flow control:
    ▸if(condition1 met){ //execute block1
        }else if(condition2 met) { //execute block2
        }…else{ //execute last-block}
      •condition: boolean|operator == != === !== <=>|method|func
        true !false anyVal|false !true NaN''null0undifined
      •block can contain 'return', nest other if statement.
    ▸switch(<choice>'exp) { case <choice1>: /*code1*/; break
                            case <choice2>: /*code2*/; break …
                            default?: //code }
    ▸for (const i of arr) {console.log(i)}
      for (let i=0; i<arr.length; i++) {console.log(arr[i])}
      •break keyword stops loop entirely.
      •continue keyword skips current instance of loop to next
      •scope issue: nested funcs treats vars globally, fix:
        (function(i){return function(){/*temporary vars*/} })(i)
      •benefits: ›we can apply styles to list of elements.
        ›add|remove|change attributes to each element from long list(like inputes).
        ›creat arrays to build filters of search element & …
    ▸while(condition){}| do{}while(condition)
      •break keyword stops loop entirely.
      •continue keyword skips current instance of loop to next
  ▪object:
    ▸literal object: created manually
      const leteralObjectName = {
        propertyMemberName: data, …, //as variables
        methodMemberName(){}, …, //as functions
          methodMemberName: function(){}, … //old syntax
      }
    ▸access members: const obj = { pro:{pro1:data}, method(){} }
      •by Dot.notation:  obj.pro.pro1 //return data.
        obj.method() //invoke its {/*block*/}.
      •by bracket-notation[dynamicVariable]:
        obj['pro']['pro1'] //return data.
        obj['method']() //invoke its {/*block*/}.
      •this keyword: refers to current object.
    ▸updating existing members:
      obj.pro.pro1|obj['pro']['pro1'] = update
      obj.method|obj.['method'] = ()=>{/*update*/}
    ▸setting new members:
      obj.pro.newPro|obj['pro']['newPro'] = data;
      obj.newMethod|obj['newMethod'] = ()=>{}
    ▸construction:
      •consept: everything are inctance of build-in object
        ex: any 'string' we create automaticly are instance of build-in string object, and share all its properties and methods.
      •old trick:
        function createNewObj(args){
          return {property: data, method(){}} }
        const instance = createNewObj(args);
      •new keyword:
        function refersToNewObj(args){
          this.property = data; this.method = ()=>{} }
        const instance = new refersToNewObj(args)
          ›create a new object.
          ›match 'this' keyword to the new object.
          ›run the code in the constructor.
          ›return the new object.
    ▸prototype chain:
      •default & last chain: Object.prototype.__proto__//null
        Object.protorype = {
          constructor: ƒ Object(),
          hasOwnProperty: ƒ hasOwnProperty(),
          isPrototypeOf: ƒ isPrototypeOf(),
          propertyIsEnumerable: ƒ propertyIsEnumerable(),
          toLocaleString: ƒ toLocaleString(),
          toString: ƒ toString(),
          valueOf: ƒ valueOf(),
          __defineGetter__: ƒ __defineGetter__(),
          __defineSetter__: ƒ __defineSetter__(),
          __lookupGetter__: ƒ __lookupGetter__(),
          __lookupSetter__: ƒ __lookupSetter__(),
          __proto__: null,
          get __proto__: ƒ __proto__(),
          set __proto__: ƒ __proto__()
        }
      •shadowing properties:
        calling ourObj.member will check for member in ourObj
          else in its ourObj.__proto__, 
          else in ourObj.__proto__.__proto__, else ...,
          else & lastly in Object.prototype
        if find it call it & end prototype chain immediately
        else return undefined.
      •accessing obj prototype:
        myObj.__proto__ ✗| Object.getPrototypeOf(myObj) ✓
      •setting a prototype:
        ›using Object.create():
          const ourProto = {…}
          const instance = Object.create(ourProto)
          Object.getPrototypeOf(instance) //ourProto
          Object.getPrototypeOf(ourProto) //Object.prototype
        ›using constructor:
          const templateProto = {
            greet() { console.log(`hi I'm ${this.name}!`) }
          }
          function template(name){this.name=name}
          template.prototype = templateProto
          template.prototype.constructor = template
          //by default template.prototype.constructor = Object
          const instance1 = new template('instance1')
          instance1.greet() //hi I'm instance1
      •own property
        Object.hasOwn(ourObj,'property?method Name')//boolean
        if member defined in the instance as ins.member //true
        else if defined in constructor as this.member //true
        else if defined in constructor without this. //false
        else if defined in prototype //false
  ▪object oriented programming: pseudo code:
    ▸classes & instances:
          •class templateName
            properties
              pro1
              pro2
            constructor
              templateName(pro1,pro2)
            methods
              method1()
              method2()
          •instance1 = new templateName(v1,v2)
            instance2 = new templateName(v3,v4)
            instance1.pro1 //v1
            instance1.pro2 //v2
            instance2.pro1 //v3
            instance2.pro2 //v4
    ▸inheriance: (extends)
          •class superParent
            properties
              pro1
            constructor
              superParent(pro1)
            methods
              method1()
              method2()
          •class subChild1 : extends superParent
            properties
              //pro1 inherited from superParent class
              pro2
            constructor
              subChild1(pro1,pro2)
            methods
              //method1 inherited from superParent class
              method2()//polymorphism:override the inherited one
              method3()
    ▸encapsulation: in js private member name star with _
      •class subClass : extends superClass
            properties
              private pro
            methods
              multi(multiplay){return this.pro * multiplay}
      •instance = new subClass
            instance.pro //error: pro private of subClass
  ▪class: template allow us consructor derive instances.
    ▸classes & constructors:
      class super{
        pro; //optional, can be initialized pro=val.
        constructor(arg){ this.pro = arg }//pro auto-declared
        method(){ console.log(`hi I'm ${this.pro}`) }
       }
      •constructor will: can be omitted(default auto-generated)
        create new object
        match this keyword in the now object
        run the code in the constructor
        return the new object
    ▸inheritance:
      class sub extends super{
        constructor(arg1,arg2){
          super(arg1) //super.constructor(arg1){this.pro=arg1}
          this.pro2 = arg2
        }
       }
    ▸Encapsulation: prefix member by #name
      class ex{
        #privatPro //must be declared, not optional.
        constructor(arg){ this.#privatPro = arg }
        public(){ this.#private() }
        #private(){ console.log('I\'m private') }
      }
      const ins = new ex()
      ins.public() //I'm private
      ins.#private() //syntax error
      ins.#privatPro //syntax error
  ▪json(javaScript object notation):
    ▸importing:
      async fn(){
        const request = new Request('url.json')
        const response = await fetch(request)
        const jsonObj = await response.json()
        //const deSerialization = await Json.parse(response.text())
        //const serialization = Json.stringify(deSerialization)
      }; fn()
    ▸json are string usefull to transmit data between server & client
    ▸can contain single #number, [array], {object}, 'string'
    ▸we required to double quote objects "properties": value 
    ▸there no methods in objects.
  ▪promise: (synchronous ≠ asynchronous)
    ▸demo:
      const api = api(arg)
      console.log(api) //Promise {<pending>}
      api.then(resp => console.log('response: ' + resp.status))
      console.log('I\'ll log before Promise "settled"')
    ▸chaining promise:
      api(arg)
        .then(a => doSomthing(a)) //return promise
        .then(a => doThis(a))
    ▸catching errors:
      api(arg)
        .then() //invoked if promise fulfilled
        .then() //invoked if promise fulfilled
        .catch(err=>console.error(`error: ${err}`))
          //invoked if promise rejected
    ▸primary promise states:
      •pending: the initial state, until settled.
      •settled:
        »fulfilled: return value(# || 'str' || {}).
          ›invoke then()'s one by one
        »rejected: because of reason(prevent fulfillement).
          ›invoke catch()
    ▸combining multiple promises:
      •Promise.all([promise1, …])
        .then() //invoked if all promises fulfilled
        .then( responses => {
          for (const response of responses) {
            if (!response.ok) {
              throw new Error(response.status)
            }
            console.log(`${response.url}: ${response.status}`)
          }
        })
        .catch() // invoked if any promise rejected
      •Promise.any([promise1, …])
        .then() //invoked if any promise fulfilled
        .catch() //invoked if all promises rejected
    ▸new syntax: then → await
      async function name() {
        try{
          const response = await fetch('url.json')
          if (!response.ok) {
            throw new Error(`HTTP error: ${response.status}`)
          }
          const json = await responce.json()
          return json
        }
        catch(err) { console.error(err) }
      }
      name() //don't wait, parse next line.
    ▸resolve:
      •resolve():
        const myPromise = new Promise((resolve,reject) => {
          //doSomthing → fulfillement
          if (fulfillement){
            resolve('pass fulfillement value or promise')
          } else { reject() }
        })
      •return promise():
        function name() {
          return func1().then(r => return func2(r))
        }
      •Promise.resolve(input)
        .then(x => /*doSomthing*/)
        //promise chain
  ▪workers:
    ▸dedecated workers: used by single script instance.
      •demo:
        //main.js:
        const worker = new Worker('path/worker.js')
        document.querySelector('button').addEventListener('click', () => {
          worker.postMessage({
            command: 'doTask1',
            otherJsonProperty: 'passValue'
          })
          worker.addEventListener('message', m => 
            document.querySelector('output').textContent = m.data
          , { once: true })
        }, { once: true })
        
        //worker.js:
        addEventListener('message', m => {
          if (m.data.command === 'doTask1') {
            task1(m.data.otherJsonProperty)
          }
        })
        function task1(arg){
          //doSomthing to arg → result
          postMessage(result)
        }
      •seprate script run in its oun thread (each cpu(2~8) core can parse limeted number(1~4) of thread)
    ▸shared workers: used by script's runing in differ windows
    ▸server workers: like proxy server, cache resource for offline usage.
  ▪apis(application programming interface):
    ▸shared:
      •all apis based on Objects store data in prop#erties and functionality on methods.
      •all have one entry point object contain all properties && methods like document|audioContext
      •almost all have events hanlers
      •often have additional security mechanisms (same-origin policy| Notifications api| autoplay policy| ≠offline)
    ▸
⋆events:
  ▪mechanisms: obj.addEventListener('event',l,boolean?option)✓
  |<el onevent=l()|/*code*/> ✖| n.onevent=l ✖
  ▪on|event:
    ▸window: »desktop: on|mousemove, mouseover, mouseout
    »general:DOMContentLoaded, devicemotion, deviceorientation
      ›on| focus, blur, load, beforeunload, unload, error, pagehide, pageshow, resize, copy, cut, paste, offline, online, hashchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
    ▸document: »m: on|touchend,touchcancel,touchmove,touchstart
    »general: on|click, dblclick, scroll, input, change, visibilitychange, copy, cut, paste, selectstart, selectionchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
    »desktop: DOMContentLoaded, readystatechange
      ›on|wheel, drag, dragend, dragenter, dragleave, dragover, drop, fullscreenchange, fullscreenerror, keyup, keydown, keypress(removed)
  ▪listener(eventHandler):funcName| function(){/*anonymous*/}|
    ()=>{}| (function(){/*temporary scope*/})()
    •automaticly pass event parameter to the func listener
      funcName→funcName(e)
  ▪boolean: falseⒹ//targer→bubbling, true//capturing→target
    phases run by order: nested els have same 'event'
    •capturing: check&run listeners from window →…→ parent
    •target: check&run listener registed on e.target, thene if e.bubbles==trueⒹ: propagates evt to parent →…→ window
    •bubbles up: check&run listeners from parent →…→ window
    ›if we add two addEventListener() one false & other true:
      phases: capturing → target → target again → bubling
    ›to prevent capturing|bubbling, listener must be:   
      e=>{e.stopPropagation();…}
    ›to target just all childrens of parent:
      parent.addEventListener('event', e=>{e.target.…;…})
    ›to target just parent:
      p.addEventListener('event', e=>{e.currentTarget.…;…})
  •options: {
    once: boolean, //call .removeEventListener() after 1listen
    capture: boolean, //??
    passive: boolean, //??
    signal: controller.signal //can passed to many listeners
      //on topLvl: const controller = new AbortController()
      //remove any/all listeners: controller.abort()
    }
  ▪multi listeners on one event:
    obj.addEventListener('sameEvent',l1)
    obj.addEventListener('sameEvent',l2)
  ▪removeEventListener('event', funcName)//unlisten
  ▪remove all: const controller = new AbortController();
    obj.addEventListener('event',l,{signal:controller.signal})
    controller.abort() //unlisten to any event share {signal}

▸2022▸
▶▪◄▲▼⋆♥▸•»›⚠️️💡⚙️±×÷²√π⁰≠≈≤≥Ø∞✓✗✖ € ← → ↑ ↓ ⇆♪©Ⓓ㊿†₱…
⋆concepts
  ▪specification
    ECMA(European Computer Manufacturers Association)
  ▪all variables declared by var(not let|const) and functions declared on topLvl are members of global object, in the web is Window, on node is global, global object can be accessed by globalThis property, regardless of the envirment.
  ▪limitation
    to save users privecy
    •same origin policy: js access same only domain && protocole tabs, else it need agreament from both domains to exchange data
    •js can't access os functions
    •js can't access memmory, cpu
    •js can access camera and microphone only after user permission
    •js can access user storage only by <input>
  ▪engine
    v8: used by bowsers chrome edge opera, run_time node deno
    spiderMonkey: in firefox
    chakra: in IE
    “JavaScriptCore”, “Nitro” and “SquirrelFish”: for Safari
    •how it work: parse scripts, compile to 01s, machine execute it.
⋆markup
  ▪<script src> /*ignore any code*/ <script>
  ▪comments: toggle line|block:  ctrl /, ctrl shift /
    ⚠️️nested comments throw error: /* /* error */ */
⋆console & debugging:
  enabled by F12
  show us errors on which files and line
  we can execute code
  multi lines by: Shift Enter
⋆run time
  node file.js
  deno run file.ts
⋆fundomintal
  ▪'use strict';
    string added globaly before any code (except comments)
    or just before function (scope only its body)
    or (function() {'use strict'; /*scoped modern syntax*/ })()
    enable modern modification to old javaScript syntax
    ⚠️️can't be disabled once it enabled
    💡enabled by default (can  be omitted) on classes & modules
    •prevent auto declaration
      undefined_var = val //error undefined_var are not declareds
  ▪declarations let|const
    let name //declare
    name = value //assignment
    let name = value //declaration & assignment
    let name1 = value1 , n2 = v2, //multi dec & ass, same line
      n3 = v3,                //new line style
      n4 = v4
      , n5 = v5;             //new line, comma first style
      , n6 = v6
  ▪constants unReAssignable variables
    const CapitalCase = 'used before parsing by devs'
    const camelCase = `on parsing, ex time is ${Date()}`
  ▪naming variables & function: [≠digit][letter digit $ _]...
    ⚠️️caseSinsitive, ≠statement_name(as: new let class ...)
    💡naming must be meaningfull, and more specific even if longer (ex: the visitor name become: currentUserName)
⋆data types 8
  ⚠️️typeof
    typeof null // 'object'
      js language error, it must be 'null'
    typeof alert // 'function'
      incorrect behavior, it must be 'object'
  ▪object can stor collection of values
    ▸have members:
      •propersy
      •methodes
  ▪primative can stor single value
    ▸symbol create unique identifier to objects keys
    ▸boolean
      ›truthy|falsy
        const falsy = Boolean(
          false || !true || ±0 || '' || undefined || null || NaN || Boolean(/*empty*/)
        )
        const truthy = Boolean(
          anyValueNotFalsy && true && !false && [] && {} && new Boolean(false) && 'false'
        )
        ⚠️️Equality operator comparing just arr|obj.toString()
          const falsy = Boolean(array == true || object == true)
          const truthy_exceptions = Boolean(
            [1] == true && new Boolean(true) == true
          )
      ›convert expression to boolean:
        const bool = !!(expression),
          bool2 = Boolean(expression),
          bool3 = (new Boolean(expression)).valueOf()
      ›constructor: Boolean()
      ›instrnce methods:
        Boolean.prototype.toString()//'true|false'
        Boolean.prototype.valueOf()//true|false
    ▸null
      const a = null //value unknown | nothing | empty
      ⚠️️is not reference to non-existing object | pointer null
      ⚠️️bug: typeof null //object
    ▸undefined
      globalThis.undefined //![Whritable,Enumerable,Configurable]
      const a //a initialized with undefined
      functino f(){/*dont return vaule*/} //f() returns undefined
      •check if a are undefined:
        typeof a              //undefined, even if undeclared
        a === undefined       //ReferenceError if undeclaredr
        a === void 0          //ReferenceError if undeclaredr
        a in window|global    //ReferenceError if undeclaredr
    ▸number
      •float ±#.f | integer ±# (≠±#.0) | NaN (safe alternative to error) | ±Infinity
      •constructor: Number()
      •convert expression to number: Number(expression) | +exp
        null//0
        undefined//NaN
        boolean//0|1
        '  \n\t    ##      '//number, except on concatenation +
        ''//0
        ' <ws?> '//0
        '  ≠#   '//NaN
      •
    ▸bigint (big integers)
      •numbers finited on ±1.7976931348623157 * 10^308, crossing the limitation will be treats as ±Infinity
      •numbers preserve save integer range of ±(2^53-1) = 9 007 199 254 740 991 nine quatrillions, crossing the limitation will incorrectly treats odds integers as next even integer
        console.log(9007199254740991 + 1); // 9007199254740992
        console.log(9007199254740991 + 2); // 9007199254740992
      •bigint can preserve integers over ±(2^53-1), but must postfixed by n:
        ±1234567890123456789012345678901234567891n
    ▸string
      •surrounded by 'pair single quotes', "pair double quotes", `pair backTicks let us embed ${expressions}`
      •convert expression to string

⋆exprissions and operators
  ▪primary expressions
  ▪left-hand-side expressions
  ▪operators concepts
    •precedence
      18 groping                              (…)
      17 member access →                      ….…
        computed member access                …[…]
        new,with argument list                new …(…)
        function call                         …(…)
        optional chaining →                   …?.…
      16 new,without argument list            new …
      15 postfix increment|decrement          …++ | …--
      14 prefix increment|decrement           ++… | --… 
        unary plus|negation                   +… | -…
        logical not                           !…
                                              typeof …
                                              void …
                                              delete …
                                              await …
      13 exponentiation ⚠️️←                   …**…
      12 multiplication|division|reminer →    …*… | …/… | …%…
      11 addition | subtraction →             … + … | … - …
      9  less|greater than or_Equal? →        …<…|…>…|…<=…|…>=…
        in | instanceof →                     …in…|…instanceof…
      8 (strict?) equality|inequality →    …==…|…!=…|…===…|…!==…
      4 logical and →                         …&&…
      3 logical or | nullish coalescing →     …||… | …??…
      2 assignment ⚠️️←                        …=…| …+=…| …-=…| …/=…| …%=…| …*=…| …**=…| …&&=…| …||=…| …??=…
        ternary 'conditional' ⚠️️←(nested 1st) …?…:…
        arrow                                 …=>…
                                              yield … | yeild* …
        spread                                ...…
      1 comma/sequence →                      …,…
  ▪access member operators
    💡white space allowed, [spases, tabs, new line's]
    •dot notation:       obj <white space?> . <ws?> member
      ⚠️️#.member//typeError, . act as number_fraction_dot
        fix: # .member | #..member | #.0.member | (#).member
      ⚠️️obj.#//typeError, fix: obj[#]
    •bracket notation:   obj <ws?> [expression: 'memberName']
  ▪increment & decrement (update var & return its old|new val)
    •postfix: console.log(v±±)//return old v, before ±1
    •prefix: console.log(±±v)//return new v, after ±1
  ▪unary operators
    ▸in
      a in context
      global_web in window
      global_node in global
    ▸typeof
      typeof('paretheses are not func') //'string'
      typeof undeclared_var //'undefined'
  ▪arithmetic operators
    •boolean treated as 1|0, except concatenation +(strings)
    ▸addition|concatenation a+b
      addition: one + true //1+1
      concatecation: false + 'less' //'falseless'
    ▸subtraction a-b
    ▸devision a/b
      a/-0.0 //-Infinity
    ▸remainder a%b // a - integer * b
      -# % ±# //-#
      # % ±# //+#
      NaN % # //NaN
      Infinity % # //NaN
      Infinity % Infinity //NaN
      ±# % Infinity //±#▸multiplication a*b
      Infinity * 0 //NaN
      Infinity * Infiniyt //Infinity
    ▸exponentiation a**b //Math.pow(a,b)
      NaN ** a // NaN
      ⚠️️limitation: base number cannot prefixed by unary operator [- + ~ ! delete void typeof]
        <unary>2 ** -2   //TypeError
        instead use: <unary>(2 ** -2),or ( <unary>2 ) ** -2
  ▪comparison operators
    ▸less|grater then orEqual?: a < | > |<= | >= b //bool
    ▸in?equality a == | != b //bool
      ⚠️️null == undefined, but null|undefined != any other value
        null|undefined do not converted to Number 0|NaN !!
    ▸strict in?equality a === | !== b //bool
      compare type, then compare value
      💡function type determined by its returned value type
    💡differ type automaticly converted to Number (not string)
      undefined→NaN, null→0 (except on == operator)
    💡strings of numbers automaticly converted to Numbers
      surrounded white space ignored including \n \t
    💡dictionary: strings compared by characters unicode 1by1
      if same nth have same unicode than continue comparison untill find differ.
      0~6: �☺☻♥♦♣♠
      b~c: ♂♀
      e~1a: ♫☼►◄↕‼¶§▬↨↑↓→
      1c~1f: ∟↔▲▼
      20: space
      21~2f: !"#$%&'()*+,-./
      30~39: 0123456789
      3a~40: :;<=>?@
      41~5a: ABCDEFGHIJKLMNOPQRSTUVWXYZ
      5b~60: [\]^_`
      61~7a: abcdefghijklmnopqrstuvwxyz
      7b~7f: {|}~⌂
      a1~ac: ¡¢£¤¥¦§¨©ª«¬
      ae~bf: ®¯°±²³´µ¶·¸¹º»¼½¾¿
      c0~ff:ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ …
  ▪logical operators
    💡and & or operators convert each operand to boolean from left to right, but return original value.
    ▸and a && b && c //return first_falsy-operand | last_operand
    ▸or a || b || c //return first_truthy_operand | last_operend
    ▸nullish coalescing a ?? b ?? c //return 1st_defined | last
      return first defined operand who are not: null | undefined, else return last operand (fallback)
      ⚠️️typeError if combined with || or &&, (use parenthesis)
  ▪conditional operator (ternary)
  ▪assignment operators (copy value to variable & return it)
    💡return NaN if one of operends are string (except on concatecation assignmeng +=)
    💡boolean converted to 1|0 (except on concatecation assignment +=)
    ▸assignment =
      let a = 1, b = 2, c = 3, d = 4
      a = b                         //simble assignment
      console.log(a)//2
      a = b = c = d                 //chaining assignment
      console.log(a, b, c, d);//4 4 4 4
    ▸addition|concatenation assignment: a += b // a = a+b
      •addition
        one += true         //1+1 = 2
        b_false += true     //0+1 = 1
      •concatenation (if one|both operends are 'string')
        one += 'rule'       //1rule
        b_true += ' access' //'true access'
    ▸subtraction assignment: a += b // a = a-b
    ▸division assignment: a /= b // a = a/b
      a /= 0 //±Infinity
    ▸remainder assignment: a %= b // a = a % b
      ten %= 3 //10%3 = 10-3*3 = 1
      a %= true = 1 //0
      a %= 0 //NaN
    ▸multiplication assignment: a *= b //a = a*b
    ▸exponentiation assignment: a **= b // a = a**b
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸destructuring assignment
      •patterns
        ⁃binding: start by let|const|var
          //TypeError, double const
          const arr = []; const [arr[0]] = [1]//const arr[0] = 1
        ⁃assignment: pre declared variables | obj.pro | arr[i]
          //TypeError, semecolon; and parenthesis() required
          ›const p1;
           {p1} = {p1:1} //parenthesis() missing
          ›const p2      //semicolon; missing
           ({p2} = {p2:2})
      •default: any expression(or function) invoked if match no value | undefined, ≠null
        ⁃can be destructuring object
          const {a = 'default', b = {p:'default'}} = {a;'override',b:{p:'override'}}
        ⁃in func we can set {} default to left-hand destructure
          function f({ a = 'default' } = {})
      •array only
        ⁃ignore item|all from array-like ≠object by passing empty comma
          const [a,,c] = ['a','ignored','c']
          const [,,] = array-like()
        ⁃rest: (just array)
          ›must be the last one, prefix(...) & ≠postfix(,comma)
            const [a, ...b] = ['a', 'b1', 'b2']
          ›it even can be array[]
            const [a, ...[b, c]] = ['a', 'b', 'c']
          ›or even nested in another array rest 
            const [a, ...[b,...[c]]] = ['a', 'b', 'c']
      •object only: 
        ⁃extract properties as same-name|renamed variables, with optional default value.
          const {p,p:rename='default'} = {p:1}
          console.log([p,rename])//[1,1]
        ⁃comuped properties names
          const propertyName= 'name'
          const {[propertyName]:rename='default'} = {name:'n'}
          rename//n
        ⁃invalid property name identifier must be renamed
          const {'invalid-identifier':rename} = {'invalid-identifier':1}
          rename// 1
          invalid-identifier//TypeError
      •swap variable|.property|[item] without temp variables
        ⁃let a=1,b=2,c=3; [a,b,c] = [b,c,a]
         console.log([a,b,c]) //[2,3,1]
        ⁃const arr=[1,2,3]; [arr[1],arr[2],arr[0]] = arr
         console.log(arr)//[2,3,1]
        ⁃const obj = {p1:1, p2:2, p3:3}
         [p1,p2,p3] = [p2,p3,p1]
         console.log(obj)//{p1:2, p2:3, p3:1}
      •parse array-like returned from function
        function arrayLike(){
          return 'abc'
        }
        [a,b,c] = arrayLike()
        console.log([a,b,c]) //['a','b','c']
      •used inside for...in|of loops, function parameters, catch
      •function parameper can be obj destructuring
        function id({ id }) { return id }
        id({ id:1, name: 'something' }) //1
        ⁃or even nested obj
          function firstName({ fullName: { firstName: fn = 'guest' } }) {
            return fn
          }
          firstName({ fullName: { firstName: 'uni' } }) //uni
      •nesting: we can nest obj|arr|both
        const person = [{
          family:{ brothers: ['jack', 'stive'] }
        }]
        [{family:{brothers:[bro1,bro2]}}] = person
        bro1  //jack
        bro2  //stive
      •for loop:
        const users = [{id:1,name:'a'}, {id:2,name:'b'}]
        for (const {id, name} of users) {
          //do something by id's and name's
        }
      •prototype chain accessed by destructuring
        const planet = { 'salor-system': 'milky way'}
        earth = Object.create(planet);
        ({ 'salor-system': galaxy } = earth)
        galaxy//milky way
      •required RegExp.prototype.exec()
      •required Sympbol.iterator
  ▪comma operator (evaluate, than return last operend)
    let x = 0
    x = (x++, console.log(x), 0) //x=0, log:1
    
    for (let i = 0, j = 5; i <= 5; i++, j--) {
      console.log(`i=${i}, j=${j}`);
    }

⋆built-in objects
  ▪Object:
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
    ▸
⋆Api

▸2023▸
⋆js:
  ▪module:
    "use strict" applyed by default!!
    scope are private top-lvl, accessible only by export/import
    this = undefined ≠ window on top-lvl
    await can be used on top-lvl
    only 1st time evaluated, & shared between all imports
    only 1st external shared src fetched & executed
    
    <script type=module> the attribute are required!!
    defer attribute preserved by defualt, same as <sm defer>
      parse html __________________________.
      <sm>           .......................__execute__
      <sm src>       .__fetch__.............__execute__
      
    async attribute compatible even inline, src not required!!
      parse html ______________.............___________
      <sm async>               .__execute__.
      <sm src async> .__fetch__.__execute__.

    CORS header require for external script from other origin
      <sm src="http://another-site.com/their.js">
      remote server header: Access-Control-Allow-Origin
      else it won't fetched for security reasons!!

    bare module supported by nodeJS & bundle tools, but ≠browser
      import {v} from './scriptNam.js'//valid by all
      import {v} from 'scriptName' //no Path, invalid in browser

    compatibility fallbacks: for old browsers
      <script type=module> //ignored by old browsers
      <script nomodule> alert('module unsupported') </script>

    ▸usage:
      export declaration
        export const/let n1 = 1, n2 = 2
        export const { n1, n2 } = obj
        export const [ n1, n2 ] = arr
        export function n(){}
        export function* n(){}
        export class n{}
      export list
        export { n1, n2, ... }
        export { n1 as reName, ... }
        export { n1 as 'str name', ... }
        export { n1 as default, ... }
      export default (⚠️ only once in module)
        export default expression
        export default function n(){}  | function(){}
        export default function* n(){} | function*(){}
        export default class n{}       | class{}
      reExport (aggregating modules) (⚠️unavailable currently)
          ⚠️ * export only named ones exluding default !!
        export *                             from 'module-name'
        export * as name                     from 'module-name'
        export { default, n1, ... }          from 'module-name'
        export { defualt as rn, n as rn,...} from 'module-name'

      imports
        import defaultErport                 from 'module-name'
        import * as name                     from 'module-name'
        import { n1, n2, ... }               from 'module-name'
        import { n1 as alias, ...}           from 'module-name'
        import { default as alias, ... }     from 'module-name'
        import { 'str name' as alias }       from 'module-name'
        import defaultErport, { n1, ... }    from 'module-name'
        import defaultErport, * as name      from 'module-name'
        import                                    'module-name'

      dynamic imports (⚠️ import() is not function, its special)
        const { default: rename, n1, ... } = await import(url)
        /* then do something with imported default, n1 ... */
  ▪proxy: new Proxy(target, handler)
    target: object (including function generator class)
    handler: object contait traps methods
    ⚠️️(set, deleteProperty) traps must return true if fulfilled
    [[internal method]] handler trap      triggers when...
      Get               get               reading property
      Set               set               writing to property
      HasProperty	      has               in operator
      Delete	          deleteProperty    delete operator
      Call              apply             function call
      Construct         construct         new operator
      GetPrototypeOf    getPrototypeOf    Object.getPrototypeOf
      SetPrototypeOf    setPrototypeOf    Object.setPrototypeOf
      IsExtensible      isExtensible      Object.isExtensible
      PreventExtensions preventExtensions
                                        Object.preventExtensions
      DefineOwnProperty defineProperty    Object.defineProperty
                                          Object.defineProperties
      GetOwnProperty    getOwnPropertyDescriptor
                                Object.getOwnPropertyDescriptor
                                          Object.keys
                                          Object.values
                                          Object.entries
                                          for..in
      OwnPropertyKeys   ownKeys	     Object.getOwnPropertyNames
                                   Object.getOwnPropertySymbols
                                          Object.keys
                                          Object.values
                                          Object.entries
                                          for..in
  ▪reflect

⋆browser:
  ▪loading document & resources:
    ▸script async defer: (non-module require src attribute)
      parse html ________.......................___________
      <script src>       .__fetch__.__execute__.
      
      parse html ______________________________.
      <script src defer> .__fetch__.............__execute__
      
      parse html __________________.............___________
      <script src async> .__fetch__.__execute__.

⋆addition: