▶►◄▲▼★♥▬•»›⚠️💡⚙️±×÷²√π⁰≠≈≤≥Ø∞✓✗✖ € ← → ↑ ↓ ⇆♪©Ⓓ㊿†₱…
scss= superset of css, sass= indent syntax style sheet.
•comments: /*!preserve /*Øif-compressed //ØleftLine ///ØsassDocs
★sass stylesheet stracture:
  •statement0= selector{statement1;statement2}
  •statement= style-rule, property-declaration
 *univarsal statements: used anywhere
  •declaraion: $variable:value
  •flow control: @if @else @each @for @while
  •@error @warn @debug
 *css statements: used anywhere except in @function
  •style-rule: selector{}
  •css at-rule @media @fon-face @supports @keyframes
  •@include (call @mixin)
  •@at-root
 *top-lvl statements: top-lvl at stylesheet|css statement
  •modyle loads @use//meta.load.css() can be nested anywhere
  •@import
  •@mixin (definition)
  •@function (definition)
 *other statements:
  •property-declaration used in style-rule or some css @rules
  •@extend used only in style-rule
 *sassScript: <expression> used in:
  ›property:<exp>; $variable:<exp>; 
  ›@function?mixin(<exp>){} ›@if?each?for?while
 *≠literal value: $v|func()|(n?operator)|&|!important
 *literals(static expressions):
  •number: ±#|±#unit(%=unit)|±#complexUnit
    ›±#.f=<number> ±#(≠±#.0)=<integer>
    »precision: ›math.funcs() use full number
      ›css generated math.round(number*1e10)*1e-10
      ›some operators(!= == <=>) use math.ceil(n*1e11)*1e-11
    ›complex unit: #q*rad/s*sm quorter-radians per square-second
    »compatibleUnits $all...: <angle:±#rad?grad?deg?turn>
      <absoluteLength:±#in?cm?mm?q?pt?pc?px> <time:±#s?ms>
      <sameUnit:±#rem?em?ch?ex?%?vw?vh?vmin?vmax?dpi?ppi?x?any…>
      ›all math.funcs return first compatible ±#unit
    ›css: ±#1e±#2//±#1*math.pow(10,±#2) |2e-2=2*math.pow(10,-2)
  •string: sequence of characters 'quoted'|unquoted
    »escapes: not all characters can be represented literally
      ›by its \hex 8delete 9tab a=newLine 20space 22" 27' a9©
        0~6: �☺☻♥♦♣♠
        b~c: ♂♀
        e~1a: ♫☼►◄↕‼¶§▬↨↑↓→
        1c~1f: ∟↔▲▼
        21~2f: !"#$%&'()*+,-./
        30~39: 0123456789
        3a~40: :;<=>?@
        41~5a: ABCDEFGHIJKLMNOPQRSTUVWXYZ
        5b~60: [\]^_`
        61~7a: abcdefghijklmnopqrstuvwxyz
        7b~7f: {|}~⌂
        a1~ac: ¡¢£¤¥¦§¨©ª«¬
        ae~bf: ®¯°±²³´µ¶·¸¹º»¼½¾¿
        c0~ff:ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ …
      ›any character(≠hex:0~f) can be escaped \" \<newLine> \#{}
      ›space after \hex #ignored, '\3 ♥'=\3♥=♥♥, '\3  ♥'=♥ ♥
      »unquoted: (look at diagram: unquoted string.png)
        »digram(e=escape): ›-- [e? [a~Z0~9_-|≠ascii] e?]…?
          ›-? [e? [a~Z_|≠ascii] e?] [e? [a~Z0~9_-|≠ascii] e?]…?
        »if valid identifier return <str>: \a9=© \1F46D=👭
          ›else if printable character return \<str>: \21=\!
          ›else return lowercase \hex+space: (♫) xx\Exx=xx\e xx
    ›quoted: '\'\a\\…#{<expression>}'='\'\a\\…<result>…'
    ›unquoted(diagram): ≠ color-name| null| boolean| and?or?not
  •color: #hexadecimal|colorName|rgb?hsl()
    »rgb?a($c,$a| $r,$g,$b,$alpha:1| $r $g $b/$a?)
      ›$red?green?blue: 0~255|0~100% ›$alpha: 0~1|0~100%
    »hsl?a($h,$s,$l,$alpha:1| $h $s $l/$a?)
      ›$hue: ±0~360?deg ›$saturation?lightness: 0~100%
  •boolean: true=anyValue(including 0 '' () []), false=null
  •null: before compile omit any property:null, null in $list
  •list: e$s…| (Ø|e,|e$s…|k:V,…)| [Ø|e|e$s…]; $s:,| |/; as<font>
    »issue invaid-lists(currently): e1/… (e1/…) [# …|e1,…|e1/…] 
      ›fix→sass2: /div=calc?math.div() /separator=list.slash()
  •map: (Ø|<exp>:<exp>,…); ›recommended: ('unique key':value,…)
    ›@mixin add($k,$v){$map:map.merge($map,($k,$v)) !global}
 *operators: 
  ›order: unary(not ± /),*%/,+-,<=>,== !=,and,or.
  •() used to separate operators|lists|unquoted-str
  •equality: == !=
   ›numbers can be unitless or compatible, -1in==-96px=T 2==2=T
   ›strings can un?quoted by '?", hi=='hi'|"hi"=T
   ›colors (red|green|blue|alpha), #80808033==rgb(gray,.2)=T
   ›lists (els|order|separator|bracketed), (e1,e2)==[e3 e2 e1]=F
   ›maps (keys|values), (k1:v1,k2:v2)==(k1:v1,k2:v2)=T
   ›boolean?null (must equal to themselves), null==false=F
   ›function (name|reference)
    meta.get-function(a,null,m1)==meta.get-function(b,null,m1)=F
    meta.get-function(a,null,m1)==meta.get-function(a,null,m2)=F
  •numeric: <exp> +|-|*|% <exp>
   ›numbers can be both unitless or compatible(return1stUnit)
   »%reminder=devidend/divisor-quotient (r+kn)%n=r //k€Z
    ›k%1=0 #.f%1=f -#.f%1=1-f ±#%0=NaN (±#unit%0=NaNunit)
   »+addition, -subtract, %modulo: ›numbers cant be incompatible
    ›if one number unitless, he will take the other number unit
    ›1+1q=2q 2-1q=1q 9%7q=2q 1s+|-|%1q//error:1s 1q incompatible
   ›unary operators: ±<exp> -(-3in + 96px)//2in
   »(-)??=hyphen| subtrac?unaryNegation operator:
    ›add space before & after - subtract, before -unary negation
    ›wrap (-$unary-negation) in space-s-list, else -subtracting
    »(-) by its position: ›<expr>-n//subtract ›-ident-//hyphen
      ›-n//negative-number ›-(≠literal number)//unary-negation
      ›1 -$n 2 (-$n)//1=subtract 2=unary-negation (space-s-list)
   »(/) by its position: n/n→separator except in:(division+warn)
    ›one|both n1/n2 ≠literan-number
    ›@function f(){@return n/n};f(); $v:n/n; (n/n)
    ›n/n = <exp> of other operator(≠/division)
    ›ex: @function d($a){@return $a/2};
      $v:16/2;@debug (4/2*4)/(2) $v/d(4) (8/2) d(8);//4 4 4 4|6W
  •relational(numbers): < > <= >=
   ›numbers can be both unitless or compatible
   ›if just one number unitless, he will be united as the other.
   ›<expression> <|<=|>|>= <expression>, 1<2=T 3q<1mm=T 1<=2q=T
    @debug 100px > 10s;//Error: Incompatible units px and s.
  •boolean: and or not
   ›not <expression>//oppsite-boolean notT=F notF=T
   ›<expression> and <expression>//T&T=T T&F|F&F=F
   ›<expression> or <expression>//TorT|TorF=T ForF=F
  •string concatenate: <exp> +|-|/ <exp>
    ›Rose+' Mary'='Rose Mary' ›sans - serif=sans-serif//hyphen
    ›unary: - moz=-moz, / 15px=/15px
★style rules: as css selector{declarations=property:value;} +:
 •nesting:
  ›s-lists: s0,s1{sa,sb{}}//s0 sa, s0 sb, s1 sa, s1 sb{}
  ›s-combinators: s0>{s1{}}| s0{>s1{}}| s0{>{s1{}}} //s0>s1{}
  »parent&: &=outer-selector, can be after|before|argumentOf s
    s0{s1{ul :is(&, s3):hover{}}}//&=s0 s1
    ›suffix: .a__b--c-d{} = .a{&__b{&--c{&-d{}}}}
    ›in sassScript: s0,s1{parent-selector:&}//&=s0,s1
    ›outside style-rule: & return null(=false)
     @mixin b{#{if(&,'&.a:before','.a:before')}{content:'♪ '}}
      .b{@include c}//.b.a:before{content: '♪ '}
      @include c;//.a:before{content: '♪ '}
    ›unify with another selector://'s0… s4'+'.a'{}=s0… s4.a{}
      @mixin a($s){@at-root #{selector.unify(&,$s)}{@content}}
      .f :valid{@include a('[type=tel]'){}//.f [type=tel]:valid{}
        @include a('input:after'){}//.f input:valid:after{} }
  »@at-root: remove outer selector, s0{@at-root div{}}//div{}
    ›by default nesting include outer selector even if & used
  »properties: s{border-*} = s{border:{style:solid;size:thin}}
    ›s{margin:1em{left:0}}
 •interpolation: #{<exp +if()>}//return type-of unquoted-str≠number
  ›can inject in: selector, propertyName, custom-property-value
  ,css @rules & funcs(), @extend, un?quoted-str, /*!loud-comment:
    @keyframes #{$name}{/*!'animate #{$component}'*/
      to{.#{$s}{#{$pn}:url('path/#{if($c,$str,"")}');--cp:#{$v}}}}

  »issue: interpolation return unquoted string.
    ›fix: @use 'sass:meta'; :root{--font: #{meta.inspect($f)}}
 •css variables: ›updating --cp affect both old & new usages.
  ›--cp declared only inside rules
  ›store 2 values --cp & falback list?, can used on differ els.
    var(--cp, <fallback>,…) used as property value
  ›fallback list? returned if --custom-property invalid css.
  »scope: ›globally: :root{--cp:v} ›locally: el{--cp:v}
 •sass variables: ›updating its value affect just new≠old usages
  ›declared anywhere, in|out rules, before|after top-lvl-rules
  ›used anywhere & within #{interpolation}
  ›can contain other variables: $v1: $v2 * $v3;
  ›store one value type at a time.
  ›hyphen=underScore: $var-name=$var_name
  ›!default flag used in new-$var|$var:null, else old value used
  »scope: ›local: declared & accessed only in current block{}.
    ›global: declared in top#lvl stylesheet, accessed anywhere.
    ›<local>{$v:assign?update !global} affect global+local scopes
    ›shadowing: <local>{$global:u} updated locally not globally
    ›<@flowControll>{$v:u} update only outer-scope $v:assigned?u
 •@at rules:
  »@use 'url|build-in' as <nameSpace> with ($configurating:u,…);
    ›@use must come before any rule except @forward & $vars
    »url: must be separated by forward/≠\, rel→current.scss?sass
      ›partial: _a.scss?sass ≠compiled until loaded, @use 'a';
      »smart find: @use 'a';// a.sass?scss?css| _a.sass?scss?css
        ›index: @use 'path';// path/_?index.sass?scss?css
    »module(loaded external styesheet):
      ›compiled once no matter how many times loaded
      »issue: can't load members through two loads
        a[$v:i] b[@use 'a'] c[@use 'b';@debug $v]//undefined
        ›fix: a[$v:i] b[@forward 'a'] c[@use 'b';@debug $v]//i
    »namespace by default last component of url without _|.scss
      ›@use 'url' as <ns>|* → <ns>.|<member>
    »members: mixins functions variables
      ›loading: <ns>?.func()?$var, @include <ns>?.mixin?()
      ›private: start name with -|_ localAccess ≠moduleLoading
      ›same name: same-name = same_name
    »configuring: ›@use 'a' with ($v:u,…);a[$v:TopLvl !defaul;…]
      ›@use 'b'; @include c($v:update);
        b[$v:i;…;@mixin c($v:null,…){@if $v{$v:$v !global}…}]
    »reassigning variable: @use 'a';@use 'b';@debug a.$v;//u
      a[$v:i] b[@use 'a';a.$v:u]
      ›build-in module variables cannot be updated (math.$e?pi)
  »@forward 'url' with ($v:u !default?,…) as <prefix>-*;
    ›must be topLvl before any rule except $vars
    ›must combined with @use in order to load public members
    ›@forward can be @extend|ed even if it isn't @use|d
    ›prefix: @forward 'url' as <prefix>-*; → <prefix>-<member>
    ›visability: @forward 'url' hide|show <member(+$)>,…;
    ›configuring: @forward 'url' with ($v:u !default?,…);
  »@function <name>(<args...>){<universal statements>@return …}
    ›top-lvl statement
    ›func-name = func_name
    ›$var:value !global;//discouraged!!
    ›arguments names must be meanfull for other devs
      can refer to previous ones ($arg1,$arg2:$arg1*2)
      optional if $arg:initialized
      argument-list must be last one: ($arg1,$arg2,$args...)
      meta.keywords($args) transform $args...→(map without $)
      pass list on calling func-name(args…)
        $args:(ka:a,kb:b); @debug func($args...);//(ka:a,kb:b)
    ›@return stops function & ignore subsequence code-block
      & return result represedant the called function.
      →r1 @else r2: @function n(a…){@if c{@return r1}@return r2}
    ›other build-in functions module.func()
      funcs: plain css functions: url() *-gradient() …
      custom-functoin: golpfile.js//sass.render?Sync({})
  »@mixin <name>|(<args…>){<statement≠topLvl>;@content(<args…>)}
    ›indent syntax: =<mixin-name>{} +<mixin-name>;
    ›can encapsulate styles included in style-rule
    ›can encapsulate style-rules included in top-lvl stylesheet?statements
    ›can serve to modify variables.
    ›called by @include <namespace>?. <name>|<name>(<args…>)
    ›<mixin-name>=<mixin_name>
    ›arguments: as @function
    »@content block: can include multple @content
      ›can have neighbors styles inside its {}
      ›@mixin name{s{@content}}@include name{/*injected*/}
      ›{@content} recognize only {local-scope variables} not outside its {block} even neighbors from same mixin body
      »pass @mixin ($args…) to @content
        @mixin n($headings...){
          @each $h in $headings{#{$h}:after{@content($h)}}
        };@include n(h1,h2,h3,h4) using ($h){content:'' +$h}
  »@extend <selector> !optional?;
    ›extender inherit & styled same cascade as all extendee appears even in upstream-scope modules who loaded by @use|@forward(even without @use).
    ›.a ul.b{@extend .x} /*if below selectors are upstream*/
      .x--ignored,ol.x{}//.x--ignored,ol.x{}(ol≠ul incompatible)
      .c .x{}//.c .x, .c .a ul.b,.a .c ul.b{} (.c .a|.a .c)
      ol.a .x//ol.a .x,ol.a ul.b{} (.a match all ol.a els)
    »%placeholder as .class but ≠compiled→css untill @extended
      ›can grouped whith & nest other selectors: s0,%ph{s1{}}
      ›%-?_privatePlceholder extended just in current stylesheet
    »optional vs mandatory: @extend <unexiste-selector>//error
      @extend <unexiste-selector> !optional//doNothing
    »limitation: ›.outside{} @media <t>{@extend .outside}//error
      ›allowed only individual selectors:
        @extend .a.b|.a .b;//error:write @extend .a,.b|.b insted
      ›html heuristic: ≠generate all possible combinations
        each ancestors selectors actes as one container
        .a .b li{…} .c .d dd{@extend li}
          //.a .b li, .a .b .c .d dd, .c .d .a .b dd{…}
  »@at-root <selector>|(with?without: rule?all?<@ruleName>, …){}
    ›remove outer nesting selector: .s0{@at-root .s1{}}//.s1{}
    @media print{.s{@at-root (with:rule|without:media){…}}//.s{…}
  •flow control:›@if not? <exp>{} @else if not? <exp>{}… @else{}
    @mixin a($a,b){ p:v;@if $a>$b{} @else if not $a{}
      @else if string.index($a,' '){} @else {@error '?? #{$a}'}}
   »@each $v,…? in <exp>{}
    ›@each $e in $list{.#{''+$e}{color:$e}}
    ›@each $key,$value in $map {##{$key}:before{content:$value}}
    ›@each $a,$b,$c in ([a1 a2 a3],$subList2,(c1,c2,c3))
      {#{$a}:before{color:$b;content:''+$c+' '}}
    ›argList: @function?mixin a($list...){@each $_ in $list{}}
      @mixin m($m...){ @each $k,$v in meta.keywords($m)
      {#{$k}:after{content:' '+$v}}} @include m($h1:1,$h2:2);
    ›nested argList: @mixin n($nest...){ @each $a,$b,$c in $nest
      {#{$a}:before{color:$b;content:''+$c+' '}}
     }@include n(h1 #fff ★,(h2 #ff0 ▶),(h3,#0f0,»),[h4 cyan ›])
   »@for $i from <exp> to|through <exp>{}
    ›can descent↓ or ascent↑, to=exclude|through=include last #
    ›@for $i from 5 to 10{}     //$i:5→6→7→8→9
    ›@for $i from 5 through 10{}//$i:5→6→7→8→9→10
    ›@for $i from 10 to 5{}     //$i:10→9→8→7→6
    ›@for $i from 10 through 5{}//$i:10→9→8→7→6→5
   ›@while <exp>{}
  •terminal: ›@debug <exp>//Debug: <combile>
   ›@warn?error(stops-compile) <exp>: used in @function?mixin
    @function z($a...){ $s:0; @each $_ in $a{
      @if meta.type-of($_) != number{@error '#{$_}' ≠ number}
      @else if $_ < 0{@warn '#{$_}<0';$s:$s + $_}@else{$s:$s + $_}
     }@return $s
    };//@debug z(1,-2);/*warn:-2<0*/@debug z(1,a);//error:a≠number
 •build-in modules:
  »@use 'sass:meta'; 16=1l+12q(6+2+2+1+1)+3m
    »load-css('module-url',$with?:null)//@use 'm' with ($v:u,)
      ›@include load-css('path/moduleName',$with:('v':update,…))
      »like @use: ›cannot configurate module alredy loaded.
        ›module loaded only once by @use or meta.load-css()
      »unlike @use: ›used enywhere, even can nest style-rule
        ›unprovide members from loaded module to the current one
          error: namespace.$var|func()|mixin()
        ›url can be unquoted string, $variable, #{interpolation}
    »feature-exists($feature)//boolean
      ›global-variable-shadowing ›extend-selector-pseudoclass
      ›units-level-3 ›at-error ›custom-property
    ›function?mixin-exists($name,$module:null)//boolean
    »content-exists()//boolean
      ›@mixin n{@content;@debug meta.content-exists()}
        @include n;//false     @include n{};//true
      ›Error: content-exists() may only be called within a mixin
    ›variable-exists($name:≠$)//boolean(current-scope)
    »global-variable-exists($name:≠$,$module:null)//boolean
      ›global-variable-exists(pi,math)//true
      ›global-variable-exists(myVar,myFile)//true
    »module-functions?variables($module)//map
      ›m-variables(myFile);//("myVar": v)
      ›m-functions(myFile);//('myFunc': get-function('myFunc'))
      ›m-variables(meta|math)//()|('e':2.7182818285,'pi':3.141…)
      ›m-functions(meta)//('type-of':get-function('type-of'),…)
      ›call(map.get(meta.module-functions(math),pow),3,2)//3^2=9
    »calc-name?args(calc?clamp?min?max($args…))//'calc?…'|$args…
      ›calc-name(min(1,2,3))//'min' calc-args(min(1,2,3))//1,2,3
    »type-of($value)//type-of $value 1/9
      ›null→null ›±#|±#unit|math.tan(±π/2)=±Infinity→number
      ›true|false→bool ›unquoted|'quoted'→string
      ›red|#f00|rgb(255,0,0)|hsl(0,100%,50%)→color
      ›e s…|(e s…|e1,|Ø)|[e s…|e1|Ø]→list
      ›@mixin?function n($args...){}→arglist
      ›(k:v,…)|meta.keywords($args:())→map
      ›get-function($name)→function
      ›calc?clamp?min?max()→calculation
    »call(meta.get-function(),$args…)//func($args…)
      »get-function($name,$css:false,$module:null)
        ›get-function(n)//refer→ @function defined currently.
        ›get-function(n,true?any)//refer→ plain-css function
        ›get-function(n,false?null,namespace)//build-in|_partial
          required @use 'namespace=build-in|_partial.scss';
          not @include meta.load-css()
      »call($get-function,$args…)//func($args…)=result
        ›meta.call(meta.get-function(pow,null,math),3,2)//3^2=9
        ›meta.call(meta.get-function(myFunct,null,myFile),3,2)
          //myFile.myFunc(3,2)=result
    ›keywords($args:(ignored,$varName:v,…))//(varName:v,…)
    »inspect($value)//$value regardless if valid css or not
      $font: 1em,'R M'; :root{--cp:#{meta.inspect($font)}}
      @debug #{$font|meta.inspect($font)}//1em,R M|1em,'R M'
  »@use 'sass:math'; 24=3u+6b+2d+3e+7t+3o
    »variables: ›math.$e//Euler#=2.718… ›math.$pi//π=3.14…
   •Units funcs: 3 ›is-unitless(±#|±#anyUnit)//boolean
    ›unit(±#|±#anyUnit)//''|'anyUnit'
    »compatible($arg1,$arg2)//boolean
      ›both:±#unitless|compatible//true both:incompatible//false
      ›issue: compatible(±#,±#anyUnite)//true
   •Bound'ing funcs: 6=3+3
    »min?max($l...)//small?biggest, all$i:±#unitless?compatible
      ›issue: min?max(#...,$compatible...)
        //small?biggest #|$compatible=use1stUnit, #…rel→1stUnit
    »clamp($min,$number,$max)//all must be ±#unitless?compatible
      ›clamp($min,≥$number|$number≥,$max)//$min|$max
      ›clamp($min,<$number<,$max)//$number
    »ceil?floor(#.f)//#+1?# ›round(#.f≥5|#.f<5)//#+1|#
      ›ceil?floor(-#.f)//-#?-#-1 ›round(-#.f≥5|<5)//-#-1|-#
      ›fraction≠0, # can be either unitless or with #anyUnit.
   •Distance funcs: 2 ›abs(±#|±#anyUnit)//absolute: +#|+#anyUnit
    »hypot($lengths...)//√($l1²+…) all$l…:±#?±#compatible=use1st
      ›hypot($ox)//1D:$om(x)=√($ox²)=math.abs($ox)
      ›hypot($ox,$oy)//2D:$om(x,y)=√($ox²+$oy²)
      ›hypot($ox,$oy,$oz)//3D:$om(x,y,z)=√($ox²+$oy²+$oz²)
   •Exponential funcs: 3
    »sqrt(+#)//squareRoot:pow(#,.5)=√# √+∞→∞slow ›sqrt(-#)//NaN 
    »pow($base,$exp)=$result ›log($result:+#,$base:null)=$exp
      »pow($base:±#,$exponent:±#)//power(^carat)
        ›pow(-#,$exp:odd)//-… ›pow(-#,$exp:even)//+…
        ›pow(+#,$exp:]-1,0[U]0,1[)//(1/$exp)√#| √-#→NaN
        ›pow(±#,$exp:[1,+∞[)//±#^$exp ›pow(±#,$exp:0)//1
        ›pow(±#,$exp:]-∞,-1])//1÷(±#^math.abs($exp))
        »pow(math.$e,±x)//e^-∞→0 e^-1=1/e e^0=1 e^1=e e^+∞→∞fast
        ›±#1e±#2//±#1*math.pow(10,±#2) |2e-2=2*math.pow(10,-2)
      »log($result:+#, $base:null=math.$e)//ln=logarithmNatural
        ›log($b^#,$b)//# ›log(1)//0
        ›log(0,$b:]1,∞[)//-Infinity ›log(→+∞,$b:]1,∞[)//→+∞slow
        ›log(0,$b:]0,1[)//Infinity ›log(→+∞,$b:]0,1[)//→-∞slow
        »ln-#=NaN ln0=-Infinity ln0.f=-# ln1=0 lne=1 ln+∞→∞slow
   •Trigonometric funcs: 7=3+3+1
    »in right triangle90⁰: hypotenuse=√(adjacet²+opposite²)
      ›soh cah toa: Cosine=Adj/Hyp Sine=Opp/Hyp Tangent=Opp/Adj
    »cos?sin?tan(±#=rad|<angle>)//$result:±# (k€Z)
      ›tan(X≠π/2+kπ)=sinX/cosX ›cos-X=cosX sin?tan-X=-sin?tanX 
      ›cos(2kπ± 0|π/6|π/4|π/3|π/2|π)=1|√3/2|√2/2|1/2|0|-1
      ›sin(2kπ± 0|π/6|π/4|π/3|π/2|π)=(±) 0|1/2|√2/2|√3/2|1|0
      ›tan(kπ± 0|π/6|π/4|π/3|π/2)=(±) 0|√3/3|1|√3|→Infinity'fast
      ›cos²X+sin²X=1 ›cos2X=cos²X-sin²X sin2X=2cosX.sinX
      ›tan(±X+kπ)=±tanX cos?sin(2kπ+ X|X+π)=(+|-)cos?sinX
      ›cos?sin(-X+π/2)=other(X) cos(X+π/2)=-sinX sin(X+π/2)=cosX
      ›cosA±B=cosA.cosB(-±)sinA.sinB sinA±B=sinA.cosB±sinB.cosA
      ›cos(2kπ±X)=Y sin(2kπ+ X|-X+π)=Y tan(kπ+X)=Y
    »acos?asin?atan($result:±#)//<angle:±#deg> (arcus funcs)
      ›acos?asin($result:[-1,1])//else:NaNdeg
    »atan2($y:±#|±#Unite,$x:±#|±#SameUnit)//<angle:±#deg>
      ›atan2(sinx,cosx)
   •other funcs: 3
    »div($dividend,$divisor)//$quotient:$devidend/$divisor
      ›div(6a,2|6,2a|6a,2b)//3a|3a^-1|3a/b
      ›both unitless|compatible//±#
    ›percentage(±#€Z)//±#*100%
    »random($limit:null)
      ›random(Ø| #€N≠0| $limit:#≥1€N)//]0,1[| #| [1,$limit]€N
  »@use 'sass:string'; 9=3q+6m
    »issue:all sass buildIn.funcs return unquoted string
      ›fix: meta.inspect(string.func(/**/))
    ›length($string)//#
    »index($string,$subString)//first $subString letter nth|null
      ›index('hello world',world);//7
      ›index('hello world',undefined);//null
    »slice($str, ±#startAt, ±#endAt?:-1D)//return slice of $str
      ›slice('hello world',-5)//'world'
      ›slice('I love you',3,6)//'love'
    »insert($string, $insert, ±#)//insert string on ±index
      ›insert('I\'am good','not ',-5)//"I'am not good"
      ›insert('hello',' world',100);//'hello world'
      ›insert('world','hello ',-100);//'hello world'
    ›quote(str|'str')//'str' ›unquote(str|'str')//str
    ›to-upper-case('Bill')//'BILL' ›to-lower-case(Bill)//bill
    ›unique-id()//ufw2ymw(≠ ufw2ybm ≠ …)

      ›mix(#6031,#0455);//#252b4933 $alpha affect mixed rgb
  »@use 'sass:list'; 10=5q+5m (immutable: return copy)
    ›is-bracketed($list)//boolean
    ›separator($list)//space?comma?slash
    »length($list)//#
      ›length((k1:v1,k2:v2))//2
    »index($list,en)//n (index start counte from 1≠0)
      ›index((ka:va,kb:vb), kb vb)//2
      ›index(e1 e2 e2 e2 e3,e2)//2 (index of first same element)
      ›index((e1,e2),eUndefined)//null
    »nth($list,±#)//element.nth(±#)
      ›list.nth((k1:v1,k2:v2,k3:v3,k4:v4),-2);//k3 v3
    »set-nth($list,±#,$v)//return $list copy & replace e±#→$v
      ›set-nth((k1:v1,k2:v2),-1,ku update)//k1 v1,ku update
      ›set-nth(e1 e2,3,update)//Error: $n: Invalid index
    ›slash(e1,…)//e1/… ›slash(e1 e2,e3 e4)//e1 e2/e3 e4
    »append($list,$v,$separator?:autoⒹ|space=d1|comma|slash)
      ›append(e1 e2,e3,$separator:$s)//e1 $s e2 $s e3
      ›append(($l),en,$separator:$s)//e1 $s … $s en
      ›append([$l],en,$separator:$s)//[e1 $s … $s en]
      ›append((k:v,…),kn vn,$separator:$s)//k v $s … $s kn vn
      ›append((k:v,…),kn vn,$separator:space)//(k v) (…) (kn vn)
    »join($list1,$list2,$separator?,$bracketed?:auto|true|false)
      ›autoⒹ: $separator=$l1,$l2,space $bracketed=$l1,false
    »zip($list1,…)//$list=$subList1,…
      ›return: comma-separator $list, space-separator $subLists
      ›$sublists nth = smallest list.length($list#)
      ›zip(a1 a2,(b1,b2,b3),[c1 c2 c3]) //a1 b1 c1, a2 b2 c2
  »@use 'sass:map'; 9=4q+5m (immutable: return copy)
    »keys((k1:v1, k2:v2, k3:v3))//k1,k2,k3
      ›keys((k:(ka:va,kb:vb), k1:v1))//k,k1
    »has-key((k:v), k1)//false
      ›has-key((k: (ka:va)), k,ka)//true
    »values((k1:v1, k2:v2, k3:v3))//v1,v2,v3
      ›values((k:(ka:va,kb:vb), k1:v1))//(ka:va,kb:vb),v1
    »get((key:value),key)//value
      ›get((k:(ka:(ka1:va1))), k,ka,ka1)//va1
      ›get((ka:va), kb)//null
    »set((k:v),k,update)//(k:update)
      ›set((k0: (k:v)), k0,k,update)//(k0: (k:update))
      ›set((k:v),kPlus,vPlus)//(k:v, kPlus:vPlus)
    »remove((k1:v1, k2:v2, k3:v3), k2, k3, kIgnored)//(k1:v1)
    ›deep-remove((k:(ka:va,krm:vrm)), k,krm)//(k: (ka:va))
    »merge((k:v,k1:v1),(k:update,k2:v2))//(k:update,k1:v1,k2:v2)
      ›merge((k0:(k:v)), k0,k,(ku:update))//(k0:(k:(ku:update)))
      ›merge((k0:(k:v)), k0,(ka:va))//(k0: (k:v, ka:va))
    ›deep-merge((k:(ka:va)),(k:(kb:vb)))//(k:(kb:kb,ka:va))
  »@use 'sass:color'; 18=9q+3M+6m
    ›red?green?blue|alpha|hue($c)//0~255|0~1|0~360deg
    ›saturation?lightness?whiteness?blackness($c)//0~100%
    »change($c,$red:null,$green:null,$blue:null,$hue:null,$saturation:null,$lightness:null,$whiteness:null,$blackness:null,$alpha:null)
      ›error: don't Enter at once all args of rgb?hsl?hwb()
      ›$red?green?blue:0~255 ›$hue:(-360~360 +360k)deg?//k€Z
      ›$saturation?lightness?whiteness?blackness:0~100% 
      ›$alpha:0~1
    »adjust(<color,change-args>)
      ›error: don't Enter at once all args of rgb?hsl?hwb()
      ›$red?green?blue:-255~255 ›$hue:(-360~360 +360k)deg?//k€Z
      ›$saturation?lightness?whiteness?blackness:-100~100%
      ›$alpha:-1~1
    »scale(<color,change-args≠$hue:-100~100%>)
      ›#% add percentage-amount of [currentVal,maximumVal]
      ›-#% subtract percentage-amount of [minimumVal,currentVal]
      ›scale(#300,$red:50%)//#900 +33%[51,255]=255-102=153d=99h
      ›scale(#300,$red:-33%)//#200 -33%[0,51]=51-17=34dec=22hex
      ›scale(#300,$alpha:-80%)//#3003 -80%[0,1]=1-.8=.2dec=33hex
    »mix($c1,$c2,$weight:0~50d~100%|0~100)
      ›mix($c1,$c2, 0|50|100)//$c2| $mix| $c1
      ›mix(#603,#045);//#324 (6+0 0+4 3+5)/2
    »hwb($hue,$whiteness,$blackness,$alpha?)
      ›hwb(#,0%,0%)//change($c:any,$hue:#)
      ›hwb($hue,$same,$same)//gray
      ›hwb(180,1%,0%|180,0%,1%);//#00ffff→#03ffff|#00fcfc
    »invert($c,$weight:0~100%d|0~100)//-(#%)$c
      ›invert($c,0|50|100)//$c|gray|-$c
      ›invert(hsl(0,100%,53%,.2));//hsl(180,100%,47%,.2)
      ›adjust(hsl(0,100%,53%,2),$hue:180,$lightness:-6%)
    ›complement($c)//adjust($c,$hue:180)
    »grayscale($c)//color.change($c,$saturation:0%)
      ›grayscale(hsl($h,$s, $lightness:0|20|100%))//#000|333|fff
    ›ie-hex-str($c)//#AARRGGBB
  »@use 'sass:selector'; 9=1q+8m
    ›$args: un?quoted-str can contain %ph but≠&;
      many ancestors parse as one container
    »is-superselector($super,$sub)//boolean
      ›if($super matches≥ $sub els≠::pseudoElement, true, false)
        is-superselector(a,'a%b,a.b,a#b,b a,:is(a)');//true
    ›parse($selector)//list(selector format)
    ›semple-selectors($selector≠[space|,])//list(selector)
      selector.simple-selectors('a%b:hover')//a, %b, :hover
    ›append($s...)//list(selector)
      append(s0,'s1,s2','sa,sb')//s0s1sa,s0s1sb,s0s2sa,s0s2sb
        append(ul a,'.b p,%b p',':after,:before')//ul a.b p:after,ul a.b p:before,ul a%b p:after,ul a%b p:before
    ›nest($s...)//list(selector), $s can contain %ph, &≠arg1
      nest(ul,'li%a','&:hover')//(ul li%a:hover,)
    »extend?replace()//list(selector)
      ›selector.extend?replace('.s','.unmatched','.any')//.s
      »extend($s,$extendee,$extender)
        //$s, but any $extendee in $s → $extendee,$extender
        ›#{$s}{} #{$extender}{@extend #{$extendee} !optional}
          selector.extend('.m a%b','%b','.n .b,a.c')
            //.m a%b, .m .n a.b, .n .m a.b, .m a.c
      ›replace($s,$origin,$replace)//$s,any $origin € $s→$replace
        selector.replace('.m a%b','%b','.n .b,a.c')
          //.m .n a.b, .n .m a.b, .m a.c
    ›unify($selector1, $selector2)//null|list(selector)
      selector.unify(a,p)//null
      selector.unify('.m .n a.b','.j .k a%b')
        //.m .n .j .k a.b%b, .j .k .m .n a.b%b
 •global functions: hsl()
  ›rgb?a($color, $alpha), last $alpha used: rgb(#0005,1)=#000
  ›if($condition, $return-if-true, $return-if-false)
  »≠recommended: ›map-get?values|keys?has-key|remove?merge
    ›list-separator|is-bracketed|length|index|set-?nth|append|join|zip
    ›un?quote|str-length?index?slice?insert|to-upper?lower-case|unique-id
    ›comparable?unitless?unit|ceil?floor?round?max?min|abs|random?persentage
    ›call?get-function|inspect|keywords|type-of|feature?function??mixin?content?global-?variable-exists
    ›adjust-color?hue| change?scale-color| alpha?opacity| red?green?blue?hue| complement|darken|desaturate|grayscale|invert|lighten|lightness|mic|opacify|fade-in?out|transparetize|saturate|saturation|ie-hex-str
    ›selector-parse?append?nest?extend?replace?unify|is-superselector|simple-selectors
★architecture: 7-1 pattern(7folders 1file=main.scss)
  ▶abstracts/_variables|functions|mixins|placeholders.scss
    ►global helpors utilities tools ≠compiled→css
  ▶vendors/_bootstrap|jquery-ui|normalize?|select2?|….scss
  ▶venders-extentions/_sameName.scss                  (optional)
    ►as vendors/ but customized framworks by us(not official).
  ▶base/_base|reset|typograthy|animations?|….scss
  ▶layout/_navigation|grid|header|footer|sidebar|forms?|….scss
  ▶components/_button|media|carousel|cover|dropdown|….scss
  ▶pages/_home|contact|….scss
  ▶themes/_themes(default)|admin|….scss               (optional)
  ▶_shame.scss: contain bugs fixs, temprory !important fixes.
  ▶main.scss: load all files by @use, //comments
    order:abstract,vender,base,layout,component,page,theme,shame
★rwd and breackpoints:
  ▶name bp: $breackpoints:('medium':(min-width:800px), 'large':(min-width:1000px), 'huge':(min-width:1200px));
    ►fexable: $breackpoints:('media':'(min-width:800px)',…);
  ▶mediaQuery manager: @mixin mq($breakpoint) {
    $raw-query: map.get($breakpoints, $breakpoint);
    @if $raw-query {
      $query: if(meta.type-of($raw-query) == string,
        string.unquote($raw-query),meta.inspect($raw-query));
      @media #{$query} {@content}
    }@else{@error '#{$breakpoint} not key of $breakpoints map'}}
  ▶usage: in general .s{@media q{…}}//@media q{.s{…}}
    .s{@include mq(huge){…}}//@media (min-width){.s{…}}
  ▶
  ▶ 
  ▶
★▶►▬•»›▲♥⚠️💡±×÷²√π⁰≠≈≤≥Ø∞✓✗✖ € ← → ↑ ↓ ⇆♪©Ⓓ㊿†₱…